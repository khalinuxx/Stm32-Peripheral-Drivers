
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012c4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800146c  0800146c  0001146c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001494  08001494  0001149c  2**0
                  CONTENTS
  4 .ARM          00000000  08001494  08001494  0001149c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001494  0800149c  0001149c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001494  08001494  00011494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001498  08001498  00011498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001149c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001149c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001149c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000039f3  00000000  00000000  000114cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b81  00000000  00000000  00014ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000458  00000000  00000000  00015a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003f0  00000000  00000000  00015e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a880  00000000  00000000  00016288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000033b0  00000000  00000000  00030b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092d82  00000000  00000000  00033eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c6c3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011b0  00000000  00000000  000c6c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001454 	.word	0x08001454

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08001454 	.word	0x08001454

080001e8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f043 0201 	orr.w	r2, r3, #1
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	601a      	str	r2, [r3, #0]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr

08000208 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	601a      	str	r2, [r3, #0]
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr

08000228 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <LL_TIM_GetAutoReload>:
  *       whether or not a timer instance supports a 32 bits counter.
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000250:	4618      	mov	r0, r3
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr

0800025c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	6a1a      	ldr	r2, [r3, #32]
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	431a      	orrs	r2, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	621a      	str	r2, [r3, #32]
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000280:	b4b0      	push	{r4, r5, r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d01c      	beq.n	80002ca <LL_TIM_OC_DisableFast+0x4a>
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	2b04      	cmp	r3, #4
 8000294:	d017      	beq.n	80002c6 <LL_TIM_OC_DisableFast+0x46>
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b10      	cmp	r3, #16
 800029a:	d012      	beq.n	80002c2 <LL_TIM_OC_DisableFast+0x42>
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	2b40      	cmp	r3, #64	; 0x40
 80002a0:	d00d      	beq.n	80002be <LL_TIM_OC_DisableFast+0x3e>
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d007      	beq.n	80002ba <LL_TIM_OC_DisableFast+0x3a>
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002b0:	d101      	bne.n	80002b6 <LL_TIM_OC_DisableFast+0x36>
 80002b2:	2305      	movs	r3, #5
 80002b4:	e00a      	b.n	80002cc <LL_TIM_OC_DisableFast+0x4c>
 80002b6:	2306      	movs	r3, #6
 80002b8:	e008      	b.n	80002cc <LL_TIM_OC_DisableFast+0x4c>
 80002ba:	2304      	movs	r3, #4
 80002bc:	e006      	b.n	80002cc <LL_TIM_OC_DisableFast+0x4c>
 80002be:	2303      	movs	r3, #3
 80002c0:	e004      	b.n	80002cc <LL_TIM_OC_DisableFast+0x4c>
 80002c2:	2302      	movs	r3, #2
 80002c4:	e002      	b.n	80002cc <LL_TIM_OC_DisableFast+0x4c>
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <LL_TIM_OC_DisableFast+0x4c>
 80002ca:	2300      	movs	r3, #0
 80002cc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3318      	adds	r3, #24
 80002d2:	461a      	mov	r2, r3
 80002d4:	4629      	mov	r1, r5
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <LL_TIM_OC_DisableFast+0x7c>)
 80002d8:	5c5b      	ldrb	r3, [r3, r1]
 80002da:	4413      	add	r3, r2
 80002dc:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80002de:	6822      	ldr	r2, [r4, #0]
 80002e0:	4629      	mov	r1, r5
 80002e2:	4b07      	ldr	r3, [pc, #28]	; (8000300 <LL_TIM_OC_DisableFast+0x80>)
 80002e4:	5c5b      	ldrb	r3, [r3, r1]
 80002e6:	4619      	mov	r1, r3
 80002e8:	2304      	movs	r3, #4
 80002ea:	408b      	lsls	r3, r1
 80002ec:	43db      	mvns	r3, r3
 80002ee:	4013      	ands	r3, r2
 80002f0:	6023      	str	r3, [r4, #0]

}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bcb0      	pop	{r4, r5, r7}
 80002fa:	4770      	bx	lr
 80002fc:	0800146c 	.word	0x0800146c
 8000300:	08001474 	.word	0x08001474

08000304 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000304:	b4b0      	push	{r4, r5, r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d01c      	beq.n	800034e <LL_TIM_OC_EnablePreload+0x4a>
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	2b04      	cmp	r3, #4
 8000318:	d017      	beq.n	800034a <LL_TIM_OC_EnablePreload+0x46>
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b10      	cmp	r3, #16
 800031e:	d012      	beq.n	8000346 <LL_TIM_OC_EnablePreload+0x42>
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	2b40      	cmp	r3, #64	; 0x40
 8000324:	d00d      	beq.n	8000342 <LL_TIM_OC_EnablePreload+0x3e>
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d007      	beq.n	800033e <LL_TIM_OC_EnablePreload+0x3a>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000334:	d101      	bne.n	800033a <LL_TIM_OC_EnablePreload+0x36>
 8000336:	2305      	movs	r3, #5
 8000338:	e00a      	b.n	8000350 <LL_TIM_OC_EnablePreload+0x4c>
 800033a:	2306      	movs	r3, #6
 800033c:	e008      	b.n	8000350 <LL_TIM_OC_EnablePreload+0x4c>
 800033e:	2304      	movs	r3, #4
 8000340:	e006      	b.n	8000350 <LL_TIM_OC_EnablePreload+0x4c>
 8000342:	2303      	movs	r3, #3
 8000344:	e004      	b.n	8000350 <LL_TIM_OC_EnablePreload+0x4c>
 8000346:	2302      	movs	r3, #2
 8000348:	e002      	b.n	8000350 <LL_TIM_OC_EnablePreload+0x4c>
 800034a:	2301      	movs	r3, #1
 800034c:	e000      	b.n	8000350 <LL_TIM_OC_EnablePreload+0x4c>
 800034e:	2300      	movs	r3, #0
 8000350:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3318      	adds	r3, #24
 8000356:	461a      	mov	r2, r3
 8000358:	4629      	mov	r1, r5
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <LL_TIM_OC_EnablePreload+0x7c>)
 800035c:	5c5b      	ldrb	r3, [r3, r1]
 800035e:	4413      	add	r3, r2
 8000360:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000362:	6822      	ldr	r2, [r4, #0]
 8000364:	4629      	mov	r1, r5
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <LL_TIM_OC_EnablePreload+0x80>)
 8000368:	5c5b      	ldrb	r3, [r3, r1]
 800036a:	4619      	mov	r1, r3
 800036c:	2308      	movs	r3, #8
 800036e:	408b      	lsls	r3, r1
 8000370:	4313      	orrs	r3, r2
 8000372:	6023      	str	r3, [r4, #0]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bcb0      	pop	{r4, r5, r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	0800146c 	.word	0x0800146c
 8000384:	08001474 	.word	0x08001474

08000388 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800039a:	f023 0307 	bic.w	r3, r3, #7
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	431a      	orrs	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	609a      	str	r2, [r3, #8]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	431a      	orrs	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	605a      	str	r2, [r3, #4]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	609a      	str	r2, [r3, #8]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <TDelay_Init>:
  * @brief  Initialise Timer x for the delay 1ms  .
  * @param  TIMx Timer Instance
  */

void TDelay_Init (TIM_TypeDef *TIMx)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08c      	sub	sp, #48	; 0x30
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	LL_TIM_InitTypeDef TIM_InitStruct={0};
 8000400:	f107 031c 	add.w	r3, r7, #28
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]


	LL_RCC_ClocksTypeDef RCC_Clock={0};
 8000410:	f107 030c 	add.w	r3, r7, #12
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
	LL_RCC_GetSystemClocksFreq(&RCC_Clock);
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fc2e 	bl	8000c84 <LL_RCC_GetSystemClocksFreq>

	TIM_InitStruct.Prescaler=(RCC_Clock.SYSCLK_Frequency/1000000)-1;/* Set the Prescaler Register :Timer freq 10Khz       */
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <TDelay_Init+0x6c>)
 800042c:	fba2 2303 	umull	r2, r3, r2, r3
 8000430:	0c9b      	lsrs	r3, r3, #18
 8000432:	b29b      	uxth	r3, r3
 8000434:	3b01      	subs	r3, #1
 8000436:	b29b      	uxth	r3, r3
 8000438:	83bb      	strh	r3, [r7, #28]
	TIM_InitStruct.CounterMode=LL_TIM_COUNTERMODE_UP ;      /* Set the CounterMode Register   */
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
	TIM_InitStruct.Autoreload=0xFFFF;                         /* Set the Autoreload Register   : 10KHz/10= 1KHz <=> 1ms */
 800043e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_InitStruct.ClockDivision=LL_TIM_CLOCKDIVISION_DIV1 ;/* Set the ClockDivision Register */
 8000444:	2300      	movs	r3, #0
 8000446:	62bb      	str	r3, [r7, #40]	; 0x28
	LL_TIM_Init (TIMx,&TIM_InitStruct);                     /* Set the Configurations         */
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	4619      	mov	r1, r3
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f000 fd54 	bl	8000efc <LL_TIM_Init>
	LL_TIM_EnableCounter(TIMx);                             /* Enable the Counter Mode        */
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff fec7 	bl	80001e8 <LL_TIM_EnableCounter>

}
 800045a:	bf00      	nop
 800045c:	3730      	adds	r7, #48	; 0x30
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	431bde83 	.word	0x431bde83

08000468 <uDelay>:
  * @brief  Pauses the program for the amount of time (in microseconds)  .
  * @param  TIMx Timer Instance
  * @param  ms the number of microseconds to pause.
  */
void uDelay(uint16_t us,TIM_TypeDef *TIMx)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	80fb      	strh	r3, [r7, #6]
	 LL_TIM_SetCounter (TIMx, 0);
 8000474:	2100      	movs	r1, #0
 8000476:	6838      	ldr	r0, [r7, #0]
 8000478:	f7ff fed6 	bl	8000228 <LL_TIM_SetCounter>
	 while(TIMx->CNT< us){}
 800047c:	bf00      	nop
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000482:	88fb      	ldrh	r3, [r7, #6]
 8000484:	429a      	cmp	r2, r3
 8000486:	d3fa      	bcc.n	800047e <uDelay+0x16>

}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <mDelay>:
  * @param  TIMx Timer Instance
  * @param  ms the number of milliseconds to pause.
  */

void mDelay(uint16_t ms,TIM_TypeDef *TIMx)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b084      	sub	sp, #16
 8000496:	af00      	add	r7, sp, #0
 8000498:	4603      	mov	r3, r0
 800049a:	6039      	str	r1, [r7, #0]
 800049c:	80fb      	strh	r3, [r7, #6]

for(int i=0;i<ms;i++)
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	e007      	b.n	80004b4 <mDelay+0x22>
{
	uDelay(1000,TIMx);
 80004a4:	6839      	ldr	r1, [r7, #0]
 80004a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004aa:	f7ff ffdd 	bl	8000468 <uDelay>
for(int i=0;i<ms;i++)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	3301      	adds	r3, #1
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	88fb      	ldrh	r3, [r7, #6]
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	dbf3      	blt.n	80004a4 <mDelay+0x12>
}

}
 80004bc:	bf00      	nop
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <TIM_PWM_Init>:
  * @brief  Initialize the Timer x for PWM mode   .
  * @param  TIMx Timer Instance
  */

 void TIM_PWM_Init(TIM_TypeDef *TIMx)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b088      	sub	sp, #32
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]


  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* Timer x Config  */
  TIM_InitStruct.Prescaler = 0;                            /* Set Prescaler For Timer x         */
 80004de:	2300      	movs	r3, #0
 80004e0:	81bb      	strh	r3, [r7, #12]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;      /* Set Counter Mode for Timer x      */
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.Autoreload = 65535;                       /* Set ARR For Timer x               */
 80004e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ea:	617b      	str	r3, [r7, #20]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;/* Set SysClock Division For Timer x */
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
  LL_TIM_Init(TIMx, &TIM_InitStruct);                      /* Valid the previous Config         */
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 fd00 	bl	8000efc <LL_TIM_Init>

  LL_TIM_EnableARRPreload(TIMx);                           /* Enable auto-reload (ARR) preload  */
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff fe83 	bl	8000208 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIMx, LL_TIM_CLOCKSOURCE_INTERNAL);/* Set Clock Source for Timer x      */
 8000502:	2100      	movs	r1, #0
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff ff3f 	bl	8000388 <LL_TIM_SetClockSource>

}
 800050a:	bf00      	nop
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <TIM_PWM_Channel_Init>:
   * @param  TIMx Timer Instance
   * @param  channels LL_TIM_CHANNEL_CHx where x can be (1..4)
   */

void TIM_PWM_Channel_Init(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b08a      	sub	sp, #40	; 0x28
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	6039      	str	r1, [r7, #0]

	  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800051c:	f107 0308 	add.w	r3, r7, #8
 8000520:	2220      	movs	r2, #32
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f000 ff8d 	bl	8001444 <memset>



	 LL_TIM_OC_EnablePreload(TIMx, Channel);
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff fee9 	bl	8000304 <LL_TIM_OC_EnablePreload>

	  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;        /* Set Output Compare Mode */
 8000532:	2360      	movs	r3, #96	; 0x60
 8000534:	60bb      	str	r3, [r7, #8]
	  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;   /* Set Output Compare State */
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
	  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
	  TIM_OC_InitStruct.CompareValue = 0;                   /* Set Output Compare value */
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
	  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;/* Set Output Compare Polarity */
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]

	  LL_TIM_OC_Init(TIMx, Channel, &TIM_OC_InitStruct);    /* Valid the pervious Config */
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	461a      	mov	r2, r3
 800054c:	6839      	ldr	r1, [r7, #0]
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f000 fd6e 	bl	8001030 <LL_TIM_OC_Init>
	  LL_TIM_OC_DisableFast(TIMx, Channel);
 8000554:	6839      	ldr	r1, [r7, #0]
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f7ff fe92 	bl	8000280 <LL_TIM_OC_DisableFast>


	  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800055c:	2100      	movs	r1, #0
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff ff27 	bl	80003b2 <LL_TIM_SetTriggerOutput>
	  LL_TIM_DisableMasterSlaveMode(TIMx);
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f7ff ff37 	bl	80003d8 <LL_TIM_DisableMasterSlaveMode>

}
 800056a:	bf00      	nop
 800056c:	3728      	adds	r7, #40	; 0x28
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <TIM_GPIO_Init>:
  * @param  Pin  LL_GPIO_PIN_x where x can be (0..15)
  * @param  Alternate LL_GPIO_AF_x where x can be (0..15)
  */

void TIM_GPIO_Init(GPIO_TypeDef *GPIOx,uint32_t Pin,uint32_t Alternate)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b08a      	sub	sp, #40	; 0x28
 8000576:	af00      	add	r7, sp, #0
 8000578:	60f8      	str	r0, [r7, #12]
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	607a      	str	r2, [r7, #4]


	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
 800058e:	615a      	str	r2, [r3, #20]
	  /**TIMx GPIO Configuration

	  */
	  GPIO_InitStruct.Pin = Pin;
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000594:	2302      	movs	r3, #2
 8000596:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = Alternate;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	627b      	str	r3, [r7, #36]	; 0x24
	  LL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f000 fa84 	bl	8000abc <LL_GPIO_Init>

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <TIM_PWM_SetDuty>:
  * @param  channels LL_TIM_CHANNEL_CHx where x can be (1..4)
  * @param  Duty PWM Duty Cycle varies between 0 and 100
  */

void TIM_PWM_SetDuty(TIM_TypeDef *TIMx,uint32_t Channel,int Duty)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	int CCR_Value=0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
	LL_TIM_CC_EnableChannel (TIMx, Channel);
 80005cc:	68b9      	ldr	r1, [r7, #8]
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	f7ff fe44 	bl	800025c <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIMx);
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f7ff fe07 	bl	80001e8 <LL_TIM_EnableCounter>

	if(Duty>100)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b64      	cmp	r3, #100	; 0x64
 80005de:	dd01      	ble.n	80005e4 <TIM_PWM_SetDuty+0x28>
	{
		Duty=100;
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	607b      	str	r3, [r7, #4]
	}
	if(Duty<0)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	da01      	bge.n	80005ee <TIM_PWM_SetDuty+0x32>
	{
		Duty=0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
	}


	CCR_Value=(LL_TIM_GetAutoReload (TIMx)/100)*Duty;
 80005ee:	68f8      	ldr	r0, [r7, #12]
 80005f0:	f7ff fe28 	bl	8000244 <LL_TIM_GetAutoReload>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a19      	ldr	r2, [pc, #100]	; (800065c <TIM_PWM_SetDuty+0xa0>)
 80005f8:	fba2 2303 	umull	r2, r3, r2, r3
 80005fc:	095b      	lsrs	r3, r3, #5
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	fb02 f303 	mul.w	r3, r2, r3
 8000604:	617b      	str	r3, [r7, #20]

	switch(Channel)
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800060c:	d01e      	beq.n	800064c <TIM_PWM_SetDuty+0x90>
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000614:	d81e      	bhi.n	8000654 <TIM_PWM_SetDuty+0x98>
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800061c:	d012      	beq.n	8000644 <TIM_PWM_SetDuty+0x88>
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000624:	d816      	bhi.n	8000654 <TIM_PWM_SetDuty+0x98>
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d003      	beq.n	8000634 <TIM_PWM_SetDuty+0x78>
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	2b10      	cmp	r3, #16
 8000630:	d004      	beq.n	800063c <TIM_PWM_SetDuty+0x80>
	case LL_TIM_CHANNEL_CH4:
	      TIMx->CCR4 = CCR_Value;
	      break;

	}
}
 8000632:	e00f      	b.n	8000654 <TIM_PWM_SetDuty+0x98>
		  TIMx->CCR1 = CCR_Value;
 8000634:	697a      	ldr	r2, [r7, #20]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
		  break;
 800063a:	e00b      	b.n	8000654 <TIM_PWM_SetDuty+0x98>
		  TIMx->CCR2 = CCR_Value;
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 8000642:	e007      	b.n	8000654 <TIM_PWM_SetDuty+0x98>
	      TIMx->CCR3 = CCR_Value;
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	63da      	str	r2, [r3, #60]	; 0x3c
	      break;
 800064a:	e003      	b.n	8000654 <TIM_PWM_SetDuty+0x98>
	      TIMx->CCR4 = CCR_Value;
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	641a      	str	r2, [r3, #64]	; 0x40
	      break;
 8000652:	bf00      	nop
}
 8000654:	bf00      	nop
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	51eb851f 	.word	0x51eb851f

08000660 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800066a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4313      	orrs	r3, r2
 8000672:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4013      	ands	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40023800 	.word	0x40023800

08000690 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800069a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80006a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4013      	ands	r3, r2
 80006ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40023800 	.word	0x40023800

080006c0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	fa93 f3a3 	rbit	r3, r3
 80006da:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	fab3 f383 	clz	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	2103      	movs	r1, #3
 80006e8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	401a      	ands	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	fa93 f3a3 	rbit	r3, r3
 80006fa:	61bb      	str	r3, [r7, #24]
  return result;
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fab3 f383 	clz	r3, r3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	431a      	orrs	r2, r3
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <main>:


void led_init(void);
//uint32_t volatile a=0;
int main()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
	TIM_OC_Init(TIM4);                            // TIMER4 Output Compare Init Function
	TIM_OC_CHANNEL_Init(TIM4,LL_TIM_CHANNEL_CH1); //Channel initialization for OC Mode */



	led_init();
 8000726:	f000 f863 	bl	80007f0 <led_init>
TIM6_EnableClock;
 800072a:	2010      	movs	r0, #16
 800072c:	f7ff ffb0 	bl	8000690 <LL_APB1_GRP1_EnableClock>
TIM4_EnableClock;
 8000730:	2004      	movs	r0, #4
 8000732:	f7ff ffad 	bl	8000690 <LL_APB1_GRP1_EnableClock>
	TDelay_Init (TIM6);
 8000736:	482b      	ldr	r0, [pc, #172]	; (80007e4 <main+0xc4>)
 8000738:	f7ff fe5e 	bl	80003f8 <TDelay_Init>
	*/                                         // LEDS initialize




	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD); // Enabling GPIO D Clock
 800073c:	2008      	movs	r0, #8
 800073e:	f7ff ff8f 	bl	8000660 <LL_AHB1_GRP1_EnableClock>
	TIM_GPIO_Init(GPIOD,LL_GPIO_PIN_13,LL_GPIO_AF_2);
 8000742:	2202      	movs	r2, #2
 8000744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000748:	4827      	ldr	r0, [pc, #156]	; (80007e8 <main+0xc8>)
 800074a:	f7ff ff12 	bl	8000572 <TIM_GPIO_Init>
	TIM_GPIO_Init(GPIOD,LL_GPIO_PIN_14,LL_GPIO_AF_2);
 800074e:	2202      	movs	r2, #2
 8000750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000754:	4824      	ldr	r0, [pc, #144]	; (80007e8 <main+0xc8>)
 8000756:	f7ff ff0c 	bl	8000572 <TIM_GPIO_Init>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800075a:	2004      	movs	r0, #4
 800075c:	f7ff ff98 	bl	8000690 <LL_APB1_GRP1_EnableClock>
	TIM_PWM_Init(TIM4);
 8000760:	4822      	ldr	r0, [pc, #136]	; (80007ec <main+0xcc>)
 8000762:	f7ff feb0 	bl	80004c6 <TIM_PWM_Init>
	TIM_PWM_Channel_Init(TIM4, LL_TIM_CHANNEL_CH2);
 8000766:	2110      	movs	r1, #16
 8000768:	4820      	ldr	r0, [pc, #128]	; (80007ec <main+0xcc>)
 800076a:	f7ff fed2 	bl	8000512 <TIM_PWM_Channel_Init>
	TIM_PWM_Channel_Init(TIM4, LL_TIM_CHANNEL_CH3);
 800076e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000772:	481e      	ldr	r0, [pc, #120]	; (80007ec <main+0xcc>)
 8000774:	f7ff fecd 	bl	8000512 <TIM_PWM_Channel_Init>


	int i=0;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
	while(1)
	{

		//a=TIM_IC_GetCap(TIM3,LL_TIM_CHANNEL_CH1);
        while(i<100)
 800077c:	e014      	b.n	80007a8 <main+0x88>
        {
		TIM_PWM_SetDuty(TIM4,LL_TIM_CHANNEL_CH2,i+=5);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3305      	adds	r3, #5
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	2110      	movs	r1, #16
 8000788:	4818      	ldr	r0, [pc, #96]	; (80007ec <main+0xcc>)
 800078a:	f7ff ff17 	bl	80005bc <TIM_PWM_SetDuty>
		TIM_PWM_SetDuty(TIM4,LL_TIM_CHANNEL_CH3,100-i);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000794:	461a      	mov	r2, r3
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <main+0xcc>)
 800079c:	f7ff ff0e 	bl	80005bc <TIM_PWM_SetDuty>
		mDelay(10,TIM6);
 80007a0:	4910      	ldr	r1, [pc, #64]	; (80007e4 <main+0xc4>)
 80007a2:	200a      	movs	r0, #10
 80007a4:	f7ff fe75 	bl	8000492 <mDelay>
        while(i<100)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b63      	cmp	r3, #99	; 0x63
 80007ac:	dde7      	ble.n	800077e <main+0x5e>
        }
        while(i>0)
 80007ae:	e014      	b.n	80007da <main+0xba>
        {
    		TIM_PWM_SetDuty(TIM4,LL_TIM_CHANNEL_CH2,i-=5);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b05      	subs	r3, #5
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	2110      	movs	r1, #16
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <main+0xcc>)
 80007bc:	f7ff fefe 	bl	80005bc <TIM_PWM_SetDuty>
    		TIM_PWM_SetDuty(TIM4,LL_TIM_CHANNEL_CH3,100-i);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80007c6:	461a      	mov	r2, r3
 80007c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <main+0xcc>)
 80007ce:	f7ff fef5 	bl	80005bc <TIM_PWM_SetDuty>
    		mDelay(10,TIM6);
 80007d2:	4904      	ldr	r1, [pc, #16]	; (80007e4 <main+0xc4>)
 80007d4:	200a      	movs	r0, #10
 80007d6:	f7ff fe5c 	bl	8000492 <mDelay>
        while(i>0)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dce7      	bgt.n	80007b0 <main+0x90>
        while(i<100)
 80007e0:	e7e2      	b.n	80007a8 <main+0x88>
 80007e2:	bf00      	nop
 80007e4:	40001000 	.word	0x40001000
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	40000800 	.word	0x40000800

080007f0 <led_init>:


}

void led_init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);         // Enabling GPIO D Clock
 80007f4:	2008      	movs	r0, #8
 80007f6:	f7ff ff33 	bl	8000660 <LL_AHB1_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_12,LL_GPIO_MODE_OUTPUT);// SET Pin 12 Mode OUTPUT
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <led_init+0x40>)
 8000802:	f7ff ff5d 	bl	80006c0 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_13,LL_GPIO_MODE_OUTPUT);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <led_init+0x40>)
 800080e:	f7ff ff57 	bl	80006c0 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_14,LL_GPIO_MODE_OUTPUT);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <led_init+0x40>)
 800081a:	f7ff ff51 	bl	80006c0 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_15,LL_GPIO_MODE_OUTPUT);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <led_init+0x40>)
 8000826:	f7ff ff4b 	bl	80006c0 <LL_GPIO_SetPinMode>
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40020c00 	.word	0x40020c00

08000834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <SystemInit+0x28>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <SystemInit+0x28>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <SystemInit+0x28>)
 800084a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800084e:	609a      	str	r2, [r3, #8]
#endif
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000862:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000864:	f7ff ffe6 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <LoopForever+0x6>)
  ldr r1, =_edata
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LoopForever+0xe>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <LoopForever+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800088e:	f000 fdb5 	bl	80013fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000892:	f7ff ff45 	bl	8000720 <main>

08000896 <LoopForever>:

LoopForever:
    b LoopForever
 8000896:	e7fe      	b.n	8000896 <LoopForever>
  ldr   r0, =_estack
 8000898:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008a4:	0800149c 	.word	0x0800149c
  ldr r2, =_sbss
 80008a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008ac:	2000001c 	.word	0x2000001c

080008b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC_IRQHandler>

080008b2 <LL_GPIO_SetPinMode>:
{
 80008b2:	b480      	push	{r7}
 80008b4:	b089      	sub	sp, #36	; 0x24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	fa93 f3a3 	rbit	r3, r3
 80008cc:	613b      	str	r3, [r7, #16]
  return result;
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	fab3 f383 	clz	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	2103      	movs	r1, #3
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43db      	mvns	r3, r3
 80008e0:	401a      	ands	r2, r3
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	fa93 f3a3 	rbit	r3, r3
 80008ec:	61bb      	str	r3, [r7, #24]
  return result;
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	fab3 f383 	clz	r3, r3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	431a      	orrs	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	3724      	adds	r7, #36	; 0x24
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	43db      	mvns	r3, r3
 8000924:	401a      	ands	r2, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	fb01 f303 	mul.w	r3, r1, r3
 800092e:	431a      	orrs	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	605a      	str	r2, [r3, #4]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	; 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa93 f3a3 	rbit	r3, r3
 800095a:	613b      	str	r3, [r7, #16]
  return result;
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	fab3 f383 	clz	r3, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2103      	movs	r1, #3
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	401a      	ands	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	fa93 f3a3 	rbit	r3, r3
 800097a:	61bb      	str	r3, [r7, #24]
  return result;
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	fab3 f383 	clz	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	431a      	orrs	r2, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000992:	bf00      	nop
 8000994:	3724      	adds	r7, #36	; 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800099e:	b480      	push	{r7}
 80009a0:	b089      	sub	sp, #36	; 0x24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	68da      	ldr	r2, [r3, #12]
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	fa93 f3a3 	rbit	r3, r3
 80009b8:	613b      	str	r3, [r7, #16]
  return result;
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	fab3 f383 	clz	r3, r3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2103      	movs	r1, #3
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	401a      	ands	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	fa93 f3a3 	rbit	r3, r3
 80009d8:	61bb      	str	r3, [r7, #24]
  return result;
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	fab3 f383 	clz	r3, r3
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	431a      	orrs	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	60da      	str	r2, [r3, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3724      	adds	r7, #36	; 0x24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6a1a      	ldr	r2, [r3, #32]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa93 f3a3 	rbit	r3, r3
 8000a16:	613b      	str	r3, [r7, #16]
  return result;
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	fab3 f383 	clz	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	210f      	movs	r1, #15
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	fa93 f3a3 	rbit	r3, r3
 8000a36:	61bb      	str	r3, [r7, #24]
  return result;
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fab3 f383 	clz	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000a4e:	bf00      	nop
 8000a50:	3724      	adds	r7, #36	; 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b089      	sub	sp, #36	; 0x24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa93 f3a3 	rbit	r3, r3
 8000a76:	613b      	str	r3, [r7, #16]
  return result;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	fab3 f383 	clz	r3, r3
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	210f      	movs	r1, #15
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	fa93 f3a3 	rbit	r3, r3
 8000a98:	61bb      	str	r3, [r7, #24]
  return result;
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	fab3 f383 	clz	r3, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000ab0:	bf00      	nop
 8000ab2:	3724      	adds	r7, #36	; 0x24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa93 f3a3 	rbit	r3, r3
 8000ada:	613b      	str	r3, [r7, #16]
  return result;
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	fab3 f383 	clz	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000ae6:	e050      	b.n	8000b8a <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	2101      	movs	r1, #1
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d042      	beq.n	8000b84 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d003      	beq.n	8000b0e <LL_GPIO_Init+0x52>
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d10d      	bne.n	8000b2a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	461a      	mov	r2, r3
 8000b14:	69b9      	ldr	r1, [r7, #24]
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ff12 	bl	8000940 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	461a      	mov	r2, r3
 8000b22:	69b9      	ldr	r1, [r7, #24]
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fef3 	bl	8000910 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	69b9      	ldr	r1, [r7, #24]
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ff33 	bl	800099e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d11a      	bne.n	8000b76 <LL_GPIO_Init+0xba>
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	fa93 f3a3 	rbit	r3, r3
 8000b4a:	60bb      	str	r3, [r7, #8]
  return result;
 8000b4c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000b4e:	fab3 f383 	clz	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b07      	cmp	r3, #7
 8000b56:	d807      	bhi.n	8000b68 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	69b9      	ldr	r1, [r7, #24]
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff4b 	bl	80009fc <LL_GPIO_SetAFPin_0_7>
 8000b66:	e006      	b.n	8000b76 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	69b9      	ldr	r1, [r7, #24]
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff72 	bl	8000a5a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	69b9      	ldr	r1, [r7, #24]
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff fe97 	bl	80008b2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	3301      	adds	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	fa22 f303 	lsr.w	r3, r2, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1a7      	bne.n	8000ae8 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <LL_RCC_GetSysClkSource+0x18>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f003 030c 	and.w	r3, r3, #12
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <LL_RCC_GetAHBPrescaler+0x18>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <LL_RCC_PLL_GetMainSource+0x18>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <LL_RCC_PLL_GetN+0x18>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	099b      	lsrs	r3, r3, #6
 8000c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40023800 	.word	0x40023800

08000c4c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <LL_RCC_PLL_GetP+0x18>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <LL_RCC_PLL_GetDivider+0x18>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000c8c:	f000 f820 	bl	8000cd0 <RCC_GetSystemClockFreq>
 8000c90:	4602      	mov	r2, r0
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f840 	bl	8000d20 <RCC_GetHCLKClockFreq>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f84e 	bl	8000d4c <RCC_GetPCLK1ClockFreq>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f85a 	bl	8000d74 <RCC_GetPCLK2ClockFreq>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60da      	str	r2, [r3, #12]
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000cda:	f7ff ff63 	bl	8000ba4 <LL_RCC_GetSysClkSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d00c      	beq.n	8000cfe <RCC_GetSystemClockFreq+0x2e>
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d80f      	bhi.n	8000d08 <RCC_GetSystemClockFreq+0x38>
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d002      	beq.n	8000cf2 <RCC_GetSystemClockFreq+0x22>
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d003      	beq.n	8000cf8 <RCC_GetSystemClockFreq+0x28>
 8000cf0:	e00a      	b.n	8000d08 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <RCC_GetSystemClockFreq+0x48>)
 8000cf4:	607b      	str	r3, [r7, #4]
      break;
 8000cf6:	e00a      	b.n	8000d0e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <RCC_GetSystemClockFreq+0x4c>)
 8000cfa:	607b      	str	r3, [r7, #4]
      break;
 8000cfc:	e007      	b.n	8000d0e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8000cfe:	2008      	movs	r0, #8
 8000d00:	f000 f84c 	bl	8000d9c <RCC_PLL_GetFreqDomain_SYS>
 8000d04:	6078      	str	r0, [r7, #4]
      break;
 8000d06:	e002      	b.n	8000d0e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <RCC_GetSystemClockFreq+0x48>)
 8000d0a:	607b      	str	r3, [r7, #4]
      break;
 8000d0c:	bf00      	nop
  }

  return frequency;
 8000d0e:	687b      	ldr	r3, [r7, #4]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	00f42400 	.word	0x00f42400
 8000d1c:	017d7840 	.word	0x017d7840

08000d20 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000d28:	f7ff ff4a 	bl	8000bc0 <LL_RCC_GetAHBPrescaler>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	091b      	lsrs	r3, r3, #4
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <RCC_GetHCLKClockFreq+0x28>)
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	40d3      	lsrs	r3, r2
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0800147c 	.word	0x0800147c

08000d4c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000d54:	f7ff ff42 	bl	8000bdc <LL_RCC_GetAPB1Prescaler>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	0a9b      	lsrs	r3, r3, #10
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <RCC_GetPCLK1ClockFreq+0x24>)
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	461a      	mov	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	40d3      	lsrs	r3, r2
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	0800148c 	.word	0x0800148c

08000d74 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000d7c:	f7ff ff3c 	bl	8000bf8 <LL_RCC_GetAPB2Prescaler>
 8000d80:	4603      	mov	r3, r0
 8000d82:	0b5b      	lsrs	r3, r3, #13
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <RCC_GetPCLK2ClockFreq+0x24>)
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	40d3      	lsrs	r3, r2
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0800148c 	.word	0x0800148c

08000d9c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000db0:	f7ff ff30 	bl	8000c14 <LL_RCC_PLL_GetMainSource>
 8000db4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d004      	beq.n	8000dc6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000dc2:	d003      	beq.n	8000dcc <RCC_PLL_GetFreqDomain_SYS+0x30>
 8000dc4:	e005      	b.n	8000dd2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8000dc8:	617b      	str	r3, [r7, #20]
      break;
 8000dca:	e005      	b.n	8000dd8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8000dce:	617b      	str	r3, [r7, #20]
      break;
 8000dd0:	e002      	b.n	8000dd8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8000dd4:	617b      	str	r3, [r7, #20]
      break;
 8000dd6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d113      	bne.n	8000e06 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000dde:	f7ff ff43 	bl	8000c68 <LL_RCC_PLL_GetDivider>
 8000de2:	4602      	mov	r2, r0
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fbb3 f4f2 	udiv	r4, r3, r2
 8000dea:	f7ff ff21 	bl	8000c30 <LL_RCC_PLL_GetN>
 8000dee:	4603      	mov	r3, r0
 8000df0:	fb03 f404 	mul.w	r4, r3, r4
 8000df4:	f7ff ff2a 	bl	8000c4c <LL_RCC_PLL_GetP>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	0c1b      	lsrs	r3, r3, #16
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fbb4 f3f3 	udiv	r3, r4, r3
 8000e04:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8000e06:	693b      	ldr	r3, [r7, #16]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	371c      	adds	r7, #28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	00f42400 	.word	0x00f42400
 8000e14:	017d7840 	.word	0x017d7840

08000e18 <LL_TIM_SetPrescaler>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <LL_TIM_SetAutoReload>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_TIM_SetRepetitionCounter>:
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <LL_TIM_OC_SetCompareCH1>:
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <LL_TIM_OC_SetCompareCH2>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_TIM_OC_SetCompareCH3>:
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_TIM_OC_SetCompareCH4>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f043 0201 	orr.w	r2, r3, #1
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	615a      	str	r2, [r3, #20]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a3d      	ldr	r2, [pc, #244]	; (8001004 <LL_TIM_Init+0x108>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d013      	beq.n	8000f3c <LL_TIM_Init+0x40>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1a:	d00f      	beq.n	8000f3c <LL_TIM_Init+0x40>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a3a      	ldr	r2, [pc, #232]	; (8001008 <LL_TIM_Init+0x10c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d00b      	beq.n	8000f3c <LL_TIM_Init+0x40>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <LL_TIM_Init+0x110>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d007      	beq.n	8000f3c <LL_TIM_Init+0x40>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a38      	ldr	r2, [pc, #224]	; (8001010 <LL_TIM_Init+0x114>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d003      	beq.n	8000f3c <LL_TIM_Init+0x40>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a37      	ldr	r2, [pc, #220]	; (8001014 <LL_TIM_Init+0x118>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d106      	bne.n	8000f4a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a2d      	ldr	r2, [pc, #180]	; (8001004 <LL_TIM_Init+0x108>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d02b      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f58:	d027      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a2a      	ldr	r2, [pc, #168]	; (8001008 <LL_TIM_Init+0x10c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d023      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a29      	ldr	r2, [pc, #164]	; (800100c <LL_TIM_Init+0x110>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d01f      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a28      	ldr	r2, [pc, #160]	; (8001010 <LL_TIM_Init+0x114>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01b      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <LL_TIM_Init+0x118>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d017      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <LL_TIM_Init+0x11c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a25      	ldr	r2, [pc, #148]	; (800101c <LL_TIM_Init+0x120>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00f      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a24      	ldr	r2, [pc, #144]	; (8001020 <LL_TIM_Init+0x124>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00b      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a23      	ldr	r2, [pc, #140]	; (8001024 <LL_TIM_Init+0x128>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a22      	ldr	r2, [pc, #136]	; (8001028 <LL_TIM_Init+0x12c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d003      	beq.n	8000faa <LL_TIM_Init+0xae>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <LL_TIM_Init+0x130>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d106      	bne.n	8000fb8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff35 	bl	8000e34 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff21 	bl	8000e18 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LL_TIM_Init+0x108>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d003      	beq.n	8000fe6 <LL_TIM_Init+0xea>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <LL_TIM_Init+0x118>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d105      	bne.n	8000ff2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	7c1b      	ldrb	r3, [r3, #16]
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff2f 	bl	8000e50 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff72 	bl	8000edc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010000 	.word	0x40010000
 8001008:	40000400 	.word	0x40000400
 800100c:	40000800 	.word	0x40000800
 8001010:	40000c00 	.word	0x40000c00
 8001014:	40010400 	.word	0x40010400
 8001018:	40014000 	.word	0x40014000
 800101c:	40014400 	.word	0x40014400
 8001020:	40014800 	.word	0x40014800
 8001024:	40001800 	.word	0x40001800
 8001028:	40001c00 	.word	0x40001c00
 800102c:	40002000 	.word	0x40002000

08001030 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001046:	d027      	beq.n	8001098 <LL_TIM_OC_Init+0x68>
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800104e:	d82a      	bhi.n	80010a6 <LL_TIM_OC_Init+0x76>
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001056:	d018      	beq.n	800108a <LL_TIM_OC_Init+0x5a>
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800105e:	d822      	bhi.n	80010a6 <LL_TIM_OC_Init+0x76>
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d003      	beq.n	800106e <LL_TIM_OC_Init+0x3e>
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b10      	cmp	r3, #16
 800106a:	d007      	beq.n	800107c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800106c:	e01b      	b.n	80010a6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f81f 	bl	80010b4 <OC1Config>
 8001076:	4603      	mov	r3, r0
 8001078:	75fb      	strb	r3, [r7, #23]
      break;
 800107a:	e015      	b.n	80010a8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 f884 	bl	800118c <OC2Config>
 8001084:	4603      	mov	r3, r0
 8001086:	75fb      	strb	r3, [r7, #23]
      break;
 8001088:	e00e      	b.n	80010a8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 f8ed 	bl	800126c <OC3Config>
 8001092:	4603      	mov	r3, r0
 8001094:	75fb      	strb	r3, [r7, #23]
      break;
 8001096:	e007      	b.n	80010a8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f000 f956 	bl	800134c <OC4Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	75fb      	strb	r3, [r7, #23]
      break;
 80010a4:	e000      	b.n	80010a8 <LL_TIM_OC_Init+0x78>
      break;
 80010a6:	bf00      	nop
  }

  return result;
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	f023 0201 	bic.w	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f023 0303 	bic.w	r3, r3, #3
 80010e2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f023 0202 	bic.w	r2, r3, #2
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f023 0201 	bic.w	r2, r3, #1
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4313      	orrs	r3, r2
 800110c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <OC1Config+0xd0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d003      	beq.n	800111e <OC1Config+0x6a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <OC1Config+0xd4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d11e      	bne.n	800115c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f023 0208 	bic.w	r2, r3, #8
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4313      	orrs	r3, r2
 800112c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f023 0204 	bic.w	r2, r3, #4
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4313      	orrs	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4619      	mov	r1, r3
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fe7c 	bl	8000e6c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010000 	.word	0x40010000
 8001188:	40010400 	.word	0x40010400

0800118c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	f023 0210 	bic.w	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f023 0220 	bic.w	r2, r3, #32
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f023 0210 	bic.w	r2, r3, #16
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4313      	orrs	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <OC2Config+0xd8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d003      	beq.n	80011fc <OC2Config+0x70>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <OC2Config+0xdc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d11f      	bne.n	800123c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	019b      	lsls	r3, r3, #6
 8001208:	4313      	orrs	r3, r2
 800120a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	019b      	lsls	r3, r3, #6
 8001218:	4313      	orrs	r3, r2
 800121a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fe1a 	bl	8000e88 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40010000 	.word	0x40010000
 8001268:	40010400 	.word	0x40010400

0800126c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f023 0303 	bic.w	r3, r3, #3
 800129a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	4313      	orrs	r3, r2
 80012b8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	4313      	orrs	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <OC3Config+0xd8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d003      	beq.n	80012da <OC3Config+0x6e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <OC3Config+0xdc>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d11f      	bne.n	800131a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	029b      	lsls	r3, r3, #10
 80012e6:	4313      	orrs	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	029b      	lsls	r3, r3, #10
 80012f6:	4313      	orrs	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	015b      	lsls	r3, r3, #5
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	4619      	mov	r1, r3
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff fdb9 	bl	8000ea4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40010000 	.word	0x40010000
 8001348:	40010400 	.word	0x40010400

0800134c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800137a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	4313      	orrs	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	031b      	lsls	r3, r3, #12
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	031b      	lsls	r3, r3, #12
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <OC4Config+0xa8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d003      	beq.n	80013bc <OC4Config+0x70>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <OC4Config+0xac>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d107      	bne.n	80013cc <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	019b      	lsls	r3, r3, #6
 80013c8:	4313      	orrs	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4619      	mov	r1, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fd6e 	bl	8000ec0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40010000 	.word	0x40010000
 80013f8:	40010400 	.word	0x40010400

080013fc <__libc_init_array>:
 80013fc:	b570      	push	{r4, r5, r6, lr}
 80013fe:	4d0d      	ldr	r5, [pc, #52]	; (8001434 <__libc_init_array+0x38>)
 8001400:	4c0d      	ldr	r4, [pc, #52]	; (8001438 <__libc_init_array+0x3c>)
 8001402:	1b64      	subs	r4, r4, r5
 8001404:	10a4      	asrs	r4, r4, #2
 8001406:	2600      	movs	r6, #0
 8001408:	42a6      	cmp	r6, r4
 800140a:	d109      	bne.n	8001420 <__libc_init_array+0x24>
 800140c:	4d0b      	ldr	r5, [pc, #44]	; (800143c <__libc_init_array+0x40>)
 800140e:	4c0c      	ldr	r4, [pc, #48]	; (8001440 <__libc_init_array+0x44>)
 8001410:	f000 f820 	bl	8001454 <_init>
 8001414:	1b64      	subs	r4, r4, r5
 8001416:	10a4      	asrs	r4, r4, #2
 8001418:	2600      	movs	r6, #0
 800141a:	42a6      	cmp	r6, r4
 800141c:	d105      	bne.n	800142a <__libc_init_array+0x2e>
 800141e:	bd70      	pop	{r4, r5, r6, pc}
 8001420:	f855 3b04 	ldr.w	r3, [r5], #4
 8001424:	4798      	blx	r3
 8001426:	3601      	adds	r6, #1
 8001428:	e7ee      	b.n	8001408 <__libc_init_array+0xc>
 800142a:	f855 3b04 	ldr.w	r3, [r5], #4
 800142e:	4798      	blx	r3
 8001430:	3601      	adds	r6, #1
 8001432:	e7f2      	b.n	800141a <__libc_init_array+0x1e>
 8001434:	08001494 	.word	0x08001494
 8001438:	08001494 	.word	0x08001494
 800143c:	08001494 	.word	0x08001494
 8001440:	08001498 	.word	0x08001498

08001444 <memset>:
 8001444:	4402      	add	r2, r0
 8001446:	4603      	mov	r3, r0
 8001448:	4293      	cmp	r3, r2
 800144a:	d100      	bne.n	800144e <memset+0xa>
 800144c:	4770      	bx	lr
 800144e:	f803 1b01 	strb.w	r1, [r3], #1
 8001452:	e7f9      	b.n	8001448 <memset+0x4>

08001454 <_init>:
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001456:	bf00      	nop
 8001458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145a:	bc08      	pop	{r3}
 800145c:	469e      	mov	lr, r3
 800145e:	4770      	bx	lr

08001460 <_fini>:
 8001460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001462:	bf00      	nop
 8001464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001466:	bc08      	pop	{r3}
 8001468:	469e      	mov	lr, r3
 800146a:	4770      	bx	lr
