
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009d4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b7c  08000b8c  00010b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b7c  08000b7c  00010b8c  2**0
                  CONTENTS
  4 .ARM          00000008  08000b7c  08000b7c  00010b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b84  08000b8c  00010b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b84  08000b84  00010b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b88  08000b88  00010b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010b8c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010b8c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000835  00000000  00000000  00010bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000242  00000000  00000000  000113f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00011638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  000116e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185ee  00000000  00000000  00011780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000007be  00000000  00000000  00029d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089e5a  00000000  00000000  0002a52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b4386  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002c0  00000000  00000000  000b43dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b64 	.word	0x08000b64

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b64 	.word	0x08000b64

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	60da      	str	r2, [r3, #12]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	60da      	str	r2, [r3, #12]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <LL_USART_SetTransferDirection>:
  *         @arg @ref LL_USART_DIRECTION_TX
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	f023 020c 	bic.w	r2, r3, #12
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	431a      	orrs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <LL_USART_ConfigCharacter>:
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
 8000546:	b480      	push	{r7}
 8000548:	b085      	sub	sp, #20
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
 8000552:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	f423 52b0 	bic.w	r2, r3, #5632	; 0x1600
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	430b      	orrs	r3, r1
 8000562:	431a      	orrs	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	60da      	str	r2, [r3, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	691b      	ldr	r3, [r3, #16]
 800056c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	431a      	orrs	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	611a      	str	r2, [r3, #16]
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8000584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000588:	b09f      	sub	sp, #124	; 0x7c
 800058a:	af00      	add	r7, sp, #0
 800058c:	6778      	str	r0, [r7, #116]	; 0x74
 800058e:	6739      	str	r1, [r7, #112]	; 0x70
 8000590:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000592:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800059a:	f040 80bc 	bne.w	8000716 <LL_USART_SetBaudRate+0x192>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800059e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80005a0:	461c      	mov	r4, r3
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	4622      	mov	r2, r4
 80005a8:	462b      	mov	r3, r5
 80005aa:	eb12 0a02 	adds.w	sl, r2, r2
 80005ae:	eb43 0b03 	adc.w	fp, r3, r3
 80005b2:	4652      	mov	r2, sl
 80005b4:	465b      	mov	r3, fp
 80005b6:	1912      	adds	r2, r2, r4
 80005b8:	eb45 0303 	adc.w	r3, r5, r3
 80005bc:	f04f 0000 	mov.w	r0, #0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	00d9      	lsls	r1, r3, #3
 80005c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80005ca:	00d0      	lsls	r0, r2, #3
 80005cc:	4602      	mov	r2, r0
 80005ce:	460b      	mov	r3, r1
 80005d0:	1911      	adds	r1, r2, r4
 80005d2:	6639      	str	r1, [r7, #96]	; 0x60
 80005d4:	416b      	adcs	r3, r5
 80005d6:	667b      	str	r3, [r7, #100]	; 0x64
 80005d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005da:	461a      	mov	r2, r3
 80005dc:	f04f 0300 	mov.w	r3, #0
 80005e0:	1891      	adds	r1, r2, r2
 80005e2:	6339      	str	r1, [r7, #48]	; 0x30
 80005e4:	415b      	adcs	r3, r3
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
 80005e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80005ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80005f0:	f7ff fdfa 	bl	80001e8 <__aeabi_uldivmod>
 80005f4:	4602      	mov	r2, r0
 80005f6:	460b      	mov	r3, r1
 80005f8:	4ba9      	ldr	r3, [pc, #676]	; (80008a0 <LL_USART_SetBaudRate+0x31c>)
 80005fa:	fba3 2302 	umull	r2, r3, r3, r2
 80005fe:	095b      	lsrs	r3, r3, #5
 8000600:	b29b      	uxth	r3, r3
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	b29e      	uxth	r6, r3
 8000606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000608:	461c      	mov	r4, r3
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	4622      	mov	r2, r4
 8000610:	462b      	mov	r3, r5
 8000612:	1891      	adds	r1, r2, r2
 8000614:	62b9      	str	r1, [r7, #40]	; 0x28
 8000616:	415b      	adcs	r3, r3
 8000618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800061a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800061e:	1912      	adds	r2, r2, r4
 8000620:	eb45 0303 	adc.w	r3, r5, r3
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f04f 0100 	mov.w	r1, #0
 800062c:	00d9      	lsls	r1, r3, #3
 800062e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000632:	00d0      	lsls	r0, r2, #3
 8000634:	4602      	mov	r2, r0
 8000636:	460b      	mov	r3, r1
 8000638:	1911      	adds	r1, r2, r4
 800063a:	65b9      	str	r1, [r7, #88]	; 0x58
 800063c:	416b      	adcs	r3, r5
 800063e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000642:	461a      	mov	r2, r3
 8000644:	f04f 0300 	mov.w	r3, #0
 8000648:	1891      	adds	r1, r2, r2
 800064a:	6239      	str	r1, [r7, #32]
 800064c:	415b      	adcs	r3, r3
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
 8000650:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000654:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000658:	f7ff fdc6 	bl	80001e8 <__aeabi_uldivmod>
 800065c:	4602      	mov	r2, r0
 800065e:	460b      	mov	r3, r1
 8000660:	4b8f      	ldr	r3, [pc, #572]	; (80008a0 <LL_USART_SetBaudRate+0x31c>)
 8000662:	fba3 1302 	umull	r1, r3, r3, r2
 8000666:	095b      	lsrs	r3, r3, #5
 8000668:	2164      	movs	r1, #100	; 0x64
 800066a:	fb01 f303 	mul.w	r3, r1, r3
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	3332      	adds	r3, #50	; 0x32
 8000674:	4a8a      	ldr	r2, [pc, #552]	; (80008a0 <LL_USART_SetBaudRate+0x31c>)
 8000676:	fba2 2303 	umull	r2, r3, r2, r3
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	b29b      	uxth	r3, r3
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	b29b      	uxth	r3, r3
 8000682:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000686:	b29b      	uxth	r3, r3
 8000688:	4433      	add	r3, r6
 800068a:	b29e      	uxth	r6, r3
 800068c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800068e:	4618      	mov	r0, r3
 8000690:	f04f 0100 	mov.w	r1, #0
 8000694:	4602      	mov	r2, r0
 8000696:	460b      	mov	r3, r1
 8000698:	1894      	adds	r4, r2, r2
 800069a:	61bc      	str	r4, [r7, #24]
 800069c:	415b      	adcs	r3, r3
 800069e:	61fb      	str	r3, [r7, #28]
 80006a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80006a4:	1812      	adds	r2, r2, r0
 80006a6:	eb41 0303 	adc.w	r3, r1, r3
 80006aa:	f04f 0400 	mov.w	r4, #0
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	00dd      	lsls	r5, r3, #3
 80006b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80006b8:	00d4      	lsls	r4, r2, #3
 80006ba:	4622      	mov	r2, r4
 80006bc:	462b      	mov	r3, r5
 80006be:	1814      	adds	r4, r2, r0
 80006c0:	653c      	str	r4, [r7, #80]	; 0x50
 80006c2:	414b      	adcs	r3, r1
 80006c4:	657b      	str	r3, [r7, #84]	; 0x54
 80006c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006c8:	461a      	mov	r2, r3
 80006ca:	f04f 0300 	mov.w	r3, #0
 80006ce:	1891      	adds	r1, r2, r2
 80006d0:	6139      	str	r1, [r7, #16]
 80006d2:	415b      	adcs	r3, r3
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80006da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80006de:	f7ff fd83 	bl	80001e8 <__aeabi_uldivmod>
 80006e2:	4602      	mov	r2, r0
 80006e4:	460b      	mov	r3, r1
 80006e6:	4b6e      	ldr	r3, [pc, #440]	; (80008a0 <LL_USART_SetBaudRate+0x31c>)
 80006e8:	fba3 1302 	umull	r1, r3, r3, r2
 80006ec:	095b      	lsrs	r3, r3, #5
 80006ee:	2164      	movs	r1, #100	; 0x64
 80006f0:	fb01 f303 	mul.w	r3, r1, r3
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	3332      	adds	r3, #50	; 0x32
 80006fa:	4a69      	ldr	r2, [pc, #420]	; (80008a0 <LL_USART_SetBaudRate+0x31c>)
 80006fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000700:	095b      	lsrs	r3, r3, #5
 8000702:	b29b      	uxth	r3, r3
 8000704:	f003 0307 	and.w	r3, r3, #7
 8000708:	b29b      	uxth	r3, r3
 800070a:	4433      	add	r3, r6
 800070c:	b29b      	uxth	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000712:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8000714:	e0be      	b.n	8000894 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000718:	461c      	mov	r4, r3
 800071a:	f04f 0500 	mov.w	r5, #0
 800071e:	4622      	mov	r2, r4
 8000720:	462b      	mov	r3, r5
 8000722:	eb12 0802 	adds.w	r8, r2, r2
 8000726:	eb43 0903 	adc.w	r9, r3, r3
 800072a:	4642      	mov	r2, r8
 800072c:	464b      	mov	r3, r9
 800072e:	1912      	adds	r2, r2, r4
 8000730:	eb45 0303 	adc.w	r3, r5, r3
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	f04f 0100 	mov.w	r1, #0
 800073c:	00d9      	lsls	r1, r3, #3
 800073e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000742:	00d0      	lsls	r0, r2, #3
 8000744:	4602      	mov	r2, r0
 8000746:	460b      	mov	r3, r1
 8000748:	1911      	adds	r1, r2, r4
 800074a:	64b9      	str	r1, [r7, #72]	; 0x48
 800074c:	416b      	adcs	r3, r5
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000752:	4618      	mov	r0, r3
 8000754:	f04f 0100 	mov.w	r1, #0
 8000758:	f04f 0200 	mov.w	r2, #0
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	008b      	lsls	r3, r1, #2
 8000762:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8000766:	0082      	lsls	r2, r0, #2
 8000768:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800076c:	f7ff fd3c 	bl	80001e8 <__aeabi_uldivmod>
 8000770:	4602      	mov	r2, r0
 8000772:	460b      	mov	r3, r1
 8000774:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <LL_USART_SetBaudRate+0x31c>)
 8000776:	fba3 2302 	umull	r2, r3, r3, r2
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	b29b      	uxth	r3, r3
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	b29e      	uxth	r6, r3
 8000782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000784:	4618      	mov	r0, r3
 8000786:	f04f 0100 	mov.w	r1, #0
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	1894      	adds	r4, r2, r2
 8000790:	60bc      	str	r4, [r7, #8]
 8000792:	415b      	adcs	r3, r3
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800079a:	1812      	adds	r2, r2, r0
 800079c:	eb41 0303 	adc.w	r3, r1, r3
 80007a0:	f04f 0400 	mov.w	r4, #0
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	00dd      	lsls	r5, r3, #3
 80007aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80007ae:	00d4      	lsls	r4, r2, #3
 80007b0:	4622      	mov	r2, r4
 80007b2:	462b      	mov	r3, r5
 80007b4:	1814      	adds	r4, r2, r0
 80007b6:	643c      	str	r4, [r7, #64]	; 0x40
 80007b8:	414b      	adcs	r3, r1
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
 80007bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007be:	4618      	mov	r0, r3
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	f04f 0200 	mov.w	r2, #0
 80007c8:	f04f 0300 	mov.w	r3, #0
 80007cc:	008b      	lsls	r3, r1, #2
 80007ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80007d2:	0082      	lsls	r2, r0, #2
 80007d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80007d8:	f7ff fd06 	bl	80001e8 <__aeabi_uldivmod>
 80007dc:	4602      	mov	r2, r0
 80007de:	460b      	mov	r3, r1
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <LL_USART_SetBaudRate+0x31c>)
 80007e2:	fba3 1302 	umull	r1, r3, r3, r2
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	2164      	movs	r1, #100	; 0x64
 80007ea:	fb01 f303 	mul.w	r3, r1, r3
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	3332      	adds	r3, #50	; 0x32
 80007f4:	4a2a      	ldr	r2, [pc, #168]	; (80008a0 <LL_USART_SetBaudRate+0x31c>)
 80007f6:	fba2 2303 	umull	r2, r3, r2, r3
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000802:	b29b      	uxth	r3, r3
 8000804:	4433      	add	r3, r6
 8000806:	b29e      	uxth	r6, r3
 8000808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800080a:	4618      	mov	r0, r3
 800080c:	f04f 0100 	mov.w	r1, #0
 8000810:	4602      	mov	r2, r0
 8000812:	460b      	mov	r3, r1
 8000814:	1894      	adds	r4, r2, r2
 8000816:	603c      	str	r4, [r7, #0]
 8000818:	415b      	adcs	r3, r3
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000820:	1812      	adds	r2, r2, r0
 8000822:	eb41 0303 	adc.w	r3, r1, r3
 8000826:	f04f 0400 	mov.w	r4, #0
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	00dd      	lsls	r5, r3, #3
 8000830:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000834:	00d4      	lsls	r4, r2, #3
 8000836:	4622      	mov	r2, r4
 8000838:	462b      	mov	r3, r5
 800083a:	1814      	adds	r4, r2, r0
 800083c:	63bc      	str	r4, [r7, #56]	; 0x38
 800083e:	414b      	adcs	r3, r1
 8000840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000844:	4618      	mov	r0, r3
 8000846:	f04f 0100 	mov.w	r1, #0
 800084a:	f04f 0200 	mov.w	r2, #0
 800084e:	f04f 0300 	mov.w	r3, #0
 8000852:	008b      	lsls	r3, r1, #2
 8000854:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8000858:	0082      	lsls	r2, r0, #2
 800085a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800085e:	f7ff fcc3 	bl	80001e8 <__aeabi_uldivmod>
 8000862:	4602      	mov	r2, r0
 8000864:	460b      	mov	r3, r1
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <LL_USART_SetBaudRate+0x31c>)
 8000868:	fba3 1302 	umull	r1, r3, r3, r2
 800086c:	095b      	lsrs	r3, r3, #5
 800086e:	2164      	movs	r1, #100	; 0x64
 8000870:	fb01 f303 	mul.w	r3, r1, r3
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	3332      	adds	r3, #50	; 0x32
 800087a:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <LL_USART_SetBaudRate+0x31c>)
 800087c:	fba2 2303 	umull	r2, r3, r2, r3
 8000880:	095b      	lsrs	r3, r3, #5
 8000882:	b29b      	uxth	r3, r3
 8000884:	f003 030f 	and.w	r3, r3, #15
 8000888:	b29b      	uxth	r3, r3
 800088a:	4433      	add	r3, r6
 800088c:	b29b      	uxth	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000892:	609a      	str	r2, [r3, #8]
}
 8000894:	bf00      	nop
 8000896:	377c      	adds	r7, #124	; 0x7c
 8000898:	46bd      	mov	sp, r7
 800089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800089e:	bf00      	nop
 80008a0:	51eb851f 	.word	0x51eb851f

080008a4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b4:	2b80      	cmp	r3, #128	; 0x80
 80008b6:	bf0c      	ite	eq
 80008b8:	2301      	moveq	r3, #1
 80008ba:	2300      	movne	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	460b      	mov	r3, r1
 80008d4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80008d6:	78fa      	ldrb	r2, [r7, #3]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	605a      	str	r2, [r3, #4]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa93 f3a3 	rbit	r3, r3
 8000902:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	fab3 f383 	clz	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2103      	movs	r1, #3
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	401a      	ands	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	fa93 f3a3 	rbit	r3, r3
 8000922:	61bb      	str	r3, [r7, #24]
  return result;
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fab3 f383 	clz	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	431a      	orrs	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000946:	b480      	push	{r7}
 8000948:	b089      	sub	sp, #36	; 0x24
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6a1a      	ldr	r2, [r3, #32]
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	fa93 f3a3 	rbit	r3, r3
 8000960:	613b      	str	r3, [r7, #16]
  return result;
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	fab3 f383 	clz	r3, r3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	210f      	movs	r1, #15
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	401a      	ands	r2, r3
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	fa93 f3a3 	rbit	r3, r3
 8000980:	61bb      	str	r3, [r7, #24]
  return result;
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	fab3 f383 	clz	r3, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	431a      	orrs	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000998:	bf00      	nop
 800099a:	3724      	adds	r7, #36	; 0x24
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009b0:	4907      	ldr	r1, [pc, #28]	; (80009d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4013      	ands	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40023800 	.word	0x40023800

080009d4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e0:	4907      	ldr	r1, [pc, #28]	; (8000a00 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4013      	ands	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009f2:	68fb      	ldr	r3, [r7, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	40023800 	.word	0x40023800

08000a04 <main>:
void uart_write(char ch);
void uart_init();



int main(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
uart_init();
 8000a0a:	f000 f811 	bl	8000a30 <uart_init>
  while(1){

	           uart_write('y');
 8000a0e:	2079      	movs	r0, #121	; 0x79
 8000a10:	f000 f842 	bl	8000a98 <uart_write>

	           for(int itr=0 ; itr<900000;itr++){}
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	e002      	b.n	8000a20 <main+0x1c>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a02      	ldr	r2, [pc, #8]	; (8000a2c <main+0x28>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	ddf8      	ble.n	8000a1a <main+0x16>
	           uart_write('y');
 8000a28:	e7f1      	b.n	8000a0e <main+0xa>
 8000a2a:	bf00      	nop
 8000a2c:	000dbb9f 	.word	0x000dbb9f

08000a30 <uart_init>:


}

void uart_init ()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock (LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff ffb5 	bl	80009a4 <LL_AHB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock (LL_APB1_GRP1_PERIPH_USART2);
 8000a3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a3e:	f7ff ffc9 	bl	80009d4 <LL_APB1_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_2, LL_GPIO_MODE_ALTERNATE);
 8000a42:	2202      	movs	r2, #2
 8000a44:	2104      	movs	r1, #4
 8000a46:	4811      	ldr	r0, [pc, #68]	; (8000a8c <uart_init+0x5c>)
 8000a48:	f7ff ff4e 	bl	80008e8 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7 (GPIOA, LL_GPIO_PIN_2,LL_GPIO_AF_7);
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	2104      	movs	r1, #4
 8000a50:	480e      	ldr	r0, [pc, #56]	; (8000a8c <uart_init+0x5c>)
 8000a52:	f7ff ff78 	bl	8000946 <LL_GPIO_SetAFPin_0_7>

	LL_USART_Disable(USART2);
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <uart_init+0x60>)
 8000a58:	f7ff fd52 	bl	8000500 <LL_USART_Disable>
	LL_USART_SetTransferDirection(USART2, LL_USART_DIRECTION_TX);
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <uart_init+0x60>)
 8000a60:	f7ff fd5e 	bl	8000520 <LL_USART_SetTransferDirection>
	LL_USART_ConfigCharacter(USART2, LL_USART_DATAWIDTH_8B,LL_USART_PARITY_NONE, LL_USART_STOPBITS_1);
 8000a64:	2300      	movs	r3, #0
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4809      	ldr	r0, [pc, #36]	; (8000a90 <uart_init+0x60>)
 8000a6c:	f7ff fd6b 	bl	8000546 <LL_USART_ConfigCharacter>
	LL_USART_SetBaudRate (USART2,16000000,LL_USART_OVERSAMPLING_8, 115200);
 8000a70:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a78:	4906      	ldr	r1, [pc, #24]	; (8000a94 <uart_init+0x64>)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <uart_init+0x60>)
 8000a7c:	f7ff fd82 	bl	8000584 <LL_USART_SetBaudRate>
	LL_USART_Enable(USART2);
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <uart_init+0x60>)
 8000a82:	f7ff fd2d 	bl	80004e0 <LL_USART_Enable>

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40004400 	.word	0x40004400
 8000a94:	00f42400 	.word	0x00f42400

08000a98 <uart_write>:

void uart_write(char ch)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	while (!LL_USART_IsActiveFlag_TXE (USART2)){}
 8000aa2:	bf00      	nop
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <uart_write+0x2c>)
 8000aa6:	f7ff fefd 	bl	80008a4 <LL_USART_IsActiveFlag_TXE>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f9      	beq.n	8000aa4 <uart_write+0xc>
	LL_USART_TransmitData8(USART2,ch);
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <uart_write+0x2c>)
 8000ab6:	f7ff ff08 	bl	80008ca <LL_USART_TransmitData8>

}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000acc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000af6:	f000 f811 	bl	8000b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afa:	f7ff ff83 	bl	8000a04 <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   r0, =_estack
 8000b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b0c:	08000b8c 	.word	0x08000b8c
  ldr r2, =_sbss
 8000b10:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b14:	2000001c 	.word	0x2000001c

08000b18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <__libc_init_array>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	4d0d      	ldr	r5, [pc, #52]	; (8000b54 <__libc_init_array+0x38>)
 8000b20:	4c0d      	ldr	r4, [pc, #52]	; (8000b58 <__libc_init_array+0x3c>)
 8000b22:	1b64      	subs	r4, r4, r5
 8000b24:	10a4      	asrs	r4, r4, #2
 8000b26:	2600      	movs	r6, #0
 8000b28:	42a6      	cmp	r6, r4
 8000b2a:	d109      	bne.n	8000b40 <__libc_init_array+0x24>
 8000b2c:	4d0b      	ldr	r5, [pc, #44]	; (8000b5c <__libc_init_array+0x40>)
 8000b2e:	4c0c      	ldr	r4, [pc, #48]	; (8000b60 <__libc_init_array+0x44>)
 8000b30:	f000 f818 	bl	8000b64 <_init>
 8000b34:	1b64      	subs	r4, r4, r5
 8000b36:	10a4      	asrs	r4, r4, #2
 8000b38:	2600      	movs	r6, #0
 8000b3a:	42a6      	cmp	r6, r4
 8000b3c:	d105      	bne.n	8000b4a <__libc_init_array+0x2e>
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
 8000b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b44:	4798      	blx	r3
 8000b46:	3601      	adds	r6, #1
 8000b48:	e7ee      	b.n	8000b28 <__libc_init_array+0xc>
 8000b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b4e:	4798      	blx	r3
 8000b50:	3601      	adds	r6, #1
 8000b52:	e7f2      	b.n	8000b3a <__libc_init_array+0x1e>
 8000b54:	08000b84 	.word	0x08000b84
 8000b58:	08000b84 	.word	0x08000b84
 8000b5c:	08000b84 	.word	0x08000b84
 8000b60:	08000b88 	.word	0x08000b88

08000b64 <_init>:
 8000b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b66:	bf00      	nop
 8000b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b6a:	bc08      	pop	{r3}
 8000b6c:	469e      	mov	lr, r3
 8000b6e:	4770      	bx	lr

08000b70 <_fini>:
 8000b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b72:	bf00      	nop
 8000b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b76:	bc08      	pop	{r3}
 8000b78:	469e      	mov	lr, r3
 8000b7a:	4770      	bx	lr
