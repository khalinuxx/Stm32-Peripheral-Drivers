
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000994  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b3c  08000b44  00010b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b3c  08000b3c  00010b44  2**0
                  CONTENTS
  4 .ARM          00000000  08000b3c  08000b3c  00010b44  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b3c  08000b44  00010b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b3c  08000b3c  00010b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b40  08000b40  00010b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010b44  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010b44  2**0
                  CONTENTS, READONLY
 13 .debug_info   000021ad  00000000  00000000  00010b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006ae  00000000  00000000  00012d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  000133d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000210  00000000  00000000  00013618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d46  00000000  00000000  00013828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001802  00000000  00000000  0002d56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095081  00000000  00000000  0002ed70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c3df1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000948  00000000  00000000  000c3e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b24 	.word	0x08000b24

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b24 	.word	0x08000b24

080001e8 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	431a      	orrs	r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr

0800020e <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800020e:	b480      	push	{r7}
 8000210:	b083      	sub	sp, #12
 8000212:	af00      	add	r7, sp, #0
 8000214:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	2b01      	cmp	r3, #1
 8000220:	bf0c      	ite	eq
 8000222:	2301      	moveq	r3, #1
 8000224:	2300      	movne	r3, #0
 8000226:	b2db      	uxtb	r3, r3
}
 8000228:	4618      	mov	r0, r3
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr

08000234 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8000242:	481c      	ldr	r0, [pc, #112]	; (80002b4 <LL_ADC_CommonInit+0x80>)
 8000244:	f7ff ffe3 	bl	800020e <LL_ADC_IsEnabled>
 8000248:	4604      	mov	r4, r0
 800024a:	481b      	ldr	r0, [pc, #108]	; (80002b8 <LL_ADC_CommonInit+0x84>)
 800024c:	f7ff ffdf 	bl	800020e <LL_ADC_IsEnabled>
 8000250:	4603      	mov	r3, r0
 8000252:	431c      	orrs	r4, r3
 8000254:	4819      	ldr	r0, [pc, #100]	; (80002bc <LL_ADC_CommonInit+0x88>)
 8000256:	f7ff ffda 	bl	800020e <LL_ADC_IsEnabled>
 800025a:	4603      	mov	r3, r0
 800025c:	4323      	orrs	r3, r4
 800025e:	2b00      	cmp	r3, #0
 8000260:	d120      	bne.n	80002a4 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d012      	beq.n	8000290 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	685a      	ldr	r2, [r3, #4]
 800026e:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <LL_ADC_CommonInit+0x8c>)
 8000270:	4013      	ands	r3, r2
 8000272:	683a      	ldr	r2, [r7, #0]
 8000274:	6811      	ldr	r1, [r2, #0]
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	6852      	ldr	r2, [r2, #4]
 800027a:	4311      	orrs	r1, r2
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	6892      	ldr	r2, [r2, #8]
 8000280:	4311      	orrs	r1, r2
 8000282:	683a      	ldr	r2, [r7, #0]
 8000284:	68d2      	ldr	r2, [r2, #12]
 8000286:	430a      	orrs	r2, r1
 8000288:	431a      	orrs	r2, r3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	e00b      	b.n	80002a8 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	685a      	ldr	r2, [r3, #4]
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <LL_ADC_CommonInit+0x8c>)
 8000296:	4013      	ands	r3, r2
 8000298:	683a      	ldr	r2, [r7, #0]
 800029a:	6812      	ldr	r2, [r2, #0]
 800029c:	431a      	orrs	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	e001      	b.n	80002a8 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80002a4:	2301      	movs	r3, #1
 80002a6:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd90      	pop	{r4, r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40012000 	.word	0x40012000
 80002b8:	40012100 	.word	0x40012100
 80002bc:	40012200 	.word	0x40012200
 80002c0:	fffc10e0 	.word	0xfffc10e0

080002c4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f7ff ff9b 	bl	800020e <LL_ADC_IsEnabled>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d117      	bne.n	800030e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	6811      	ldr	r1, [r2, #0]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	6892      	ldr	r2, [r2, #8]
 80002f2:	430a      	orrs	r2, r1
 80002f4:	431a      	orrs	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	431a      	orrs	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	e001      	b.n	8000312 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800030e:	2301      	movs	r3, #1
 8000310:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000326:	2300      	movs	r3, #0
 8000328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f7ff ff6f 	bl	800020e <LL_ADC_IsEnabled>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d12b      	bne.n	800038e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d009      	beq.n	8000352 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	e005      	b.n	800035e <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	689a      	ldr	r2, [r3, #8]
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <LL_ADC_REG_Init+0x80>)
 8000364:	4013      	ands	r3, r2
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	6812      	ldr	r2, [r2, #0]
 800036a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800036e:	683a      	ldr	r2, [r7, #0]
 8000370:	68d2      	ldr	r2, [r2, #12]
 8000372:	4311      	orrs	r1, r2
 8000374:	683a      	ldr	r2, [r7, #0]
 8000376:	6912      	ldr	r2, [r2, #16]
 8000378:	430a      	orrs	r2, r1
 800037a:	431a      	orrs	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	4619      	mov	r1, r3
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f7ff ff2e 	bl	80001e8 <LL_ADC_REG_SetSequencerLength>
 800038c:	e001      	b.n	8000392 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800038e:	2301      	movs	r3, #1
 8000390:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000392:	7bfb      	ldrb	r3, [r7, #15]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	c0fffcfd 	.word	0xc0fffcfd

080003a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db0b      	blt.n	80003ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 021f 	and.w	r2, r3, #31
 80003b8:	4907      	ldr	r1, [pc, #28]	; (80003d8 <__NVIC_EnableIRQ+0x38>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	095b      	lsrs	r3, r3, #5
 80003c0:	2001      	movs	r0, #1
 80003c2:	fa00 f202 	lsl.w	r2, r0, r2
 80003c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000e100 	.word	0xe000e100

080003dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	6039      	str	r1, [r7, #0]
 80003e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db0a      	blt.n	8000406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	490c      	ldr	r1, [pc, #48]	; (8000428 <__NVIC_SetPriority+0x4c>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	0112      	lsls	r2, r2, #4
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	440b      	add	r3, r1
 8000400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000404:	e00a      	b.n	800041c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4908      	ldr	r1, [pc, #32]	; (800042c <__NVIC_SetPriority+0x50>)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	f003 030f 	and.w	r3, r3, #15
 8000412:	3b04      	subs	r3, #4
 8000414:	0112      	lsls	r2, r2, #4
 8000416:	b2d2      	uxtb	r2, r2
 8000418:	440b      	add	r3, r1
 800041a:	761a      	strb	r2, [r3, #24]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	e000e100 	.word	0xe000e100
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <LL_ADC_REG_SetSequencerRanks>:
{
 8000430:	b490      	push	{r4, r7}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	332c      	adds	r3, #44	; 0x2c
 8000440:	4619      	mov	r1, r3
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000448:	f44f 7240 	mov.w	r2, #768	; 0x300
 800044c:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800044e:	697a      	ldr	r2, [r7, #20]
 8000450:	fa92 f2a2 	rbit	r2, r2
 8000454:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000456:	693a      	ldr	r2, [r7, #16]
 8000458:	fab2 f282 	clz	r2, r2
 800045c:	b2d2      	uxtb	r2, r2
 800045e:	40d3      	lsrs	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	440b      	add	r3, r1
 8000464:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8000466:	6822      	ldr	r2, [r4, #0]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	f003 031f 	and.w	r3, r3, #31
 800046e:	211f      	movs	r1, #31
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	43db      	mvns	r3, r3
 8000476:	401a      	ands	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f003 011f 	and.w	r1, r3, #31
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	f003 031f 	and.w	r3, r3, #31
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	4313      	orrs	r3, r2
 800048a:	6023      	str	r3, [r4, #0]
}
 800048c:	bf00      	nop
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bc90      	pop	{r4, r7}
 8000494:	4770      	bx	lr

08000496 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	431a      	orrs	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	609a      	str	r2, [r3, #8]
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <LL_ADC_SetChannelSamplingTime>:
{
 80004bc:	b490      	push	{r4, r7}
 80004be:	b08a      	sub	sp, #40	; 0x28
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	330c      	adds	r3, #12
 80004cc:	4619      	mov	r1, r3
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80004d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	fa92 f2a2 	rbit	r2, r2
 80004e0:	613a      	str	r2, [r7, #16]
  return result;
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	fab2 f282 	clz	r2, r2
 80004e8:	b2d2      	uxtb	r2, r2
 80004ea:	40d3      	lsrs	r3, r2
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	440b      	add	r3, r1
 80004f0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80004f2:	6822      	ldr	r2, [r4, #0]
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80004fa:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80004fe:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000500:	69f9      	ldr	r1, [r7, #28]
 8000502:	fa91 f1a1 	rbit	r1, r1
 8000506:	61b9      	str	r1, [r7, #24]
  return result;
 8000508:	69b9      	ldr	r1, [r7, #24]
 800050a:	fab1 f181 	clz	r1, r1
 800050e:	b2c9      	uxtb	r1, r1
 8000510:	40cb      	lsrs	r3, r1
 8000512:	2107      	movs	r1, #7
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	401a      	ands	r2, r3
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000522:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000526:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800052a:	fa91 f1a1 	rbit	r1, r1
 800052e:	6239      	str	r1, [r7, #32]
  return result;
 8000530:	6a39      	ldr	r1, [r7, #32]
 8000532:	fab1 f181 	clz	r1, r1
 8000536:	b2c9      	uxtb	r1, r1
 8000538:	40cb      	lsrs	r3, r1
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	fa01 f303 	lsl.w	r3, r1, r3
 8000540:	4313      	orrs	r3, r2
 8000542:	6023      	str	r3, [r4, #0]
}
 8000544:	bf00      	nop
 8000546:	3728      	adds	r7, #40	; 0x28
 8000548:	46bd      	mov	sp, r7
 800054a:	bc90      	pop	{r4, r7}
 800054c:	4770      	bx	lr

0800054e <LL_ADC_Disable>:
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	f023 0201 	bic.w	r2, r3, #1
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	609a      	str	r2, [r3, #8]
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <LL_ADC_EnableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_EnableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOCS(ADC_TypeDef *ADCx)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	f043 0220 	orr.w	r2, r3, #32
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	605a      	str	r2, [r3, #4]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <LL_ADC_EnableIT_OVR>:
  * @rmtoll CR1      OVRIE          LL_ADC_EnableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_OVR);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	605a      	str	r2, [r3, #4]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <LL_ADC_EnableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	605a      	str	r2, [r3, #4]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <LL_ADC_EnableIT_AWD1>:
  * @rmtoll CR1      AWDIE          LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_AWD1);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	605a      	str	r2, [r3, #4]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <ADC_Init>:
  * @brief  Initialize some features of ADC instance.
  * @param  ADCx ADC instance
  *
  */
void ADC_Init(ADC_TypeDef *ADCx)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]

	  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]



	  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
	  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
	  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
	  LL_ADC_Init(ADCx, &ADC_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff fe55 	bl	80002c4 <LL_ADC_Init>


}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <ADC_REG_Init>:
  * @param  ADCx ADC instance
  *
  */

void ADC_REG_Init(ADC_TypeDef *ADCx)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b088      	sub	sp, #32
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
	 LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

	  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
	  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
	  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
	  ADC_REG_InitStruct.ContinuousMode =  LL_ADC_REG_CONV_SINGLE;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
	  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
	  LL_ADC_REG_Init(ADCx, &ADC_REG_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff fe61 	bl	800031c <LL_ADC_REG_Init>
	  LL_ADC_REG_SetFlagEndOfConversion(ADCx, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800065a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff19 	bl	8000496 <LL_ADC_REG_SetFlagEndOfConversion>


}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <ADC_Com_Init>:
  *         must be disabled.
  * @param  ADCx ADC  instance
  */

void ADC_Com_Init(ADC_TypeDef *ADCx)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	 LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]

	  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
	  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
	  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADCx), &ADC_CommonInitStruct);
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	4619      	mov	r1, r3
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <ADC_Com_Init+0x34>)
 8000692:	f7ff fdcf 	bl	8000234 <LL_ADC_CommonInit>

}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40012300 	.word	0x40012300

080006a4 <ADC_Channel_Init>:
  * @param  Rank LL_ADC_REG_RANK_x where x can be(1..16)
  * @param  Channel  ADC channel LL_ADC_CHANNEL_x where x can be (1..16)
  */

void ADC_Channel_Init(ADC_TypeDef *ADCx,uint32_t Rank , uint32_t Channel)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
	  /** Configure Regular Channel*/
	  LL_ADC_REG_SetSequencerRanks(ADCx,Rank,Channel);
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff febb 	bl	8000430 <LL_ADC_REG_SetSequencerRanks>
	  LL_ADC_SetChannelSamplingTime(ADCx, Channel,LL_ADC_SAMPLINGTIME_112CYCLES);
 80006ba:	2205      	movs	r2, #5
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f7ff fefc 	bl	80004bc <LL_ADC_SetChannelSamplingTime>
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <ADC_IRQ_Init>:
/**
  * @brief  Config and Enable NVIC For ADC Interrupt
  * @param  periority Interrupt periority
  */
void ADC_IRQ_Init(uint32_t priority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority(ADC_IRQn,priority);
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	2012      	movs	r0, #18
 80006d8:	f7ff fe80 	bl	80003dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(ADC_IRQn);
 80006dc:	2012      	movs	r0, #18
 80006de:	f7ff fe5f 	bl	80003a0 <__NVIC_EnableIRQ>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <ADC_IType_Enable>:
  *
  *
  * @retval None
  */
void ADC_IType_Enable(ADC_TypeDef *ADCx,ADC_IType IT)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	 LL_ADC_Disable(ADCx);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff28 	bl	800054e <LL_ADC_Disable>
  switch(IT)
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d81b      	bhi.n	800073c <ADC_IType_Enable+0x50>
 8000704:	a201      	add	r2, pc, #4	; (adr r2, 800070c <ADC_IType_Enable+0x20>)
 8000706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070a:	bf00      	nop
 800070c:	0800071d 	.word	0x0800071d
 8000710:	08000725 	.word	0x08000725
 8000714:	08000735 	.word	0x08000735
 8000718:	0800072d 	.word	0x0800072d
  {
  case EOCS_IT :
	  LL_ADC_EnableIT_EOCS(ADCx);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ff26 	bl	800056e <LL_ADC_EnableIT_EOCS>

  break;
 8000722:	e00b      	b.n	800073c <ADC_IType_Enable+0x50>
  case OVR_IT:
	  LL_ADC_EnableIT_OVR(ADCx);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff32 	bl	800058e <LL_ADC_EnableIT_OVR>

  break;
 800072a:	e007      	b.n	800073c <ADC_IType_Enable+0x50>
  case JEOS_IT :
	  LL_ADC_EnableIT_JEOS(ADCx);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff3e 	bl	80005ae <LL_ADC_EnableIT_JEOS>
  break;
 8000732:	e003      	b.n	800073c <ADC_IType_Enable+0x50>
  case AWD1_IT:
	  LL_ADC_EnableIT_AWD1(ADCx);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff4a 	bl	80005ce <LL_ADC_EnableIT_AWD1>
  break;
 800073a:	bf00      	nop

  }

}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa93 f3a3 	rbit	r3, r3
 800075e:	613b      	str	r3, [r7, #16]
  return result;
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	fab3 f383 	clz	r3, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	2103      	movs	r1, #3
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	43db      	mvns	r3, r3
 8000772:	401a      	ands	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	fa93 f3a3 	rbit	r3, r3
 800077e:	61bb      	str	r3, [r7, #24]
  return result;
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	fab3 f383 	clz	r3, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	fa01 f303 	lsl.w	r3, r1, r3
 8000790:	431a      	orrs	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	601a      	str	r2, [r3, #0]
}
 8000796:	bf00      	nop
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	691a      	ldr	r2, [r3, #16]
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	4013      	ands	r3, r2
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	bf0c      	ite	eq
 80007ba:	2301      	moveq	r3, #1
 80007bc:	2300      	movne	r3, #0
 80007be:	b2db      	uxtb	r3, r3
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	4013      	ands	r3, r2
 80007e2:	041a      	lsls	r2, r3, #16
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	400b      	ands	r3, r1
 80007ec:	431a      	orrs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	619a      	str	r2, [r3, #24]
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <LL_ADC_Enable>:
{
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f043 0201 	orr.w	r2, r3, #1
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	609a      	str	r2, [r3, #8]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_ADC_REG_StartConversionSWStart>:
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	609a      	str	r2, [r3, #8]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <LL_ADC_REG_ReadConversionData32>:
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	b29b      	uxth	r3, r3
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <LL_ADC_IsActiveFlag_EOCS>:
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f003 0302 	and.w	r3, r3, #2
 8000868:	2b02      	cmp	r3, #2
 800086a:	bf0c      	ite	eq
 800086c:	2301      	moveq	r3, #1
 800086e:	2300      	movne	r3, #0
 8000870:	b2db      	uxtb	r3, r3
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <LL_ADC_IsActiveFlag_OVR>:
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	2b20      	cmp	r3, #32
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_ADC_ClearFlag_EOCS>:
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f06f 0202 	mvn.w	r2, #2
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <LL_ADC_IsEnabledIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_IsEnabledIT_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabledIT_EOCS(ADC_TypeDef *ADCx)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR1, LL_ADC_IT_EOCS) == (LL_ADC_IT_EOCS));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f003 0320 	and.w	r3, r3, #32
 80008d0:	2b20      	cmp	r3, #32
 80008d2:	bf0c      	ite	eq
 80008d4:	2301      	moveq	r3, #1
 80008d6:	2300      	movne	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <LL_ADC_IsEnabledIT_OVR>:
  * @rmtoll CR1      OVRIE          LL_ADC_IsEnabledIT_OVR
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabledIT_OVR(ADC_TypeDef *ADCx)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR1, LL_ADC_IT_OVR) == (LL_ADC_IT_OVR));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008fa:	bf0c      	ite	eq
 80008fc:	2301      	moveq	r3, #1
 80008fe:	2300      	movne	r3, #0
 8000900:	b2db      	uxtb	r3, r3
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800091a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800091c:	4907      	ldr	r1, [pc, #28]	; (800093c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4313      	orrs	r3, r2
 8000922:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4013      	ands	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	40023800 	.word	0x40023800

08000940 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <LL_APB2_GRP1_EnableClock+0x2c>)
 800094a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <LL_APB2_GRP1_EnableClock+0x2c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4313      	orrs	r3, r2
 8000952:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4013      	ands	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	40023800 	.word	0x40023800

08000970 <main>:
#define VSENSE 3.3/4096  // 12 bit res

uint32_t temp;
float val ;
int main()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000974:	2008      	movs	r0, #8
 8000976:	f7ff ffcb 	bl	8000910 <LL_AHB1_GRP1_EnableClock>

    LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_12,LL_GPIO_MODE_OUTPUT);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000980:	4822      	ldr	r0, [pc, #136]	; (8000a0c <main+0x9c>)
 8000982:	f7ff fedf 	bl	8000744 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_13,LL_GPIO_MODE_OUTPUT);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098c:	481f      	ldr	r0, [pc, #124]	; (8000a0c <main+0x9c>)
 800098e:	f7ff fed9 	bl	8000744 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_14,LL_GPIO_MODE_OUTPUT);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000998:	481c      	ldr	r0, [pc, #112]	; (8000a0c <main+0x9c>)
 800099a:	f7ff fed3 	bl	8000744 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_15,LL_GPIO_MODE_OUTPUT);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a4:	4819      	ldr	r0, [pc, #100]	; (8000a0c <main+0x9c>)
 80009a6:	f7ff fecd 	bl	8000744 <LL_GPIO_SetPinMode>




	LL_AHB1_GRP1_EnableClock( LL_AHB1_GRP1_PERIPH_GPIOA);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f7ff ffb0 	bl	8000910 <LL_AHB1_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOA,LL_GPIO_PIN_0,LL_GPIO_MODE_INPUT);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	4816      	ldr	r0, [pc, #88]	; (8000a10 <main+0xa0>)
 80009b6:	f7ff fec5 	bl	8000744 <LL_GPIO_SetPinMode>





	ADC1_EnableClock;// ADC Clock Enable
 80009ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009be:	f7ff ffbf 	bl	8000940 <LL_APB2_GRP1_EnableClock>
	ADC_Init(ADC1);// ADC Initializing
 80009c2:	4814      	ldr	r0, [pc, #80]	; (8000a14 <main+0xa4>)
 80009c4:	f7ff fe13 	bl	80005ee <ADC_Init>
	ADC_REG_Init(ADC1);// ADC Regular Group Initializing
 80009c8:	4812      	ldr	r0, [pc, #72]	; (8000a14 <main+0xa4>)
 80009ca:	f7ff fe2a 	bl	8000622 <ADC_REG_Init>
	ADC_Com_Init(ADC1);// ADC commun Parameters Initializing
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <main+0xa4>)
 80009d0:	f7ff fe4c 	bl	800066c <ADC_Com_Init>
	ADC_IRQ_Init(0);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff fe79 	bl	80006cc <ADC_IRQ_Init>
    ADC_IType_Enable(ADC1,EOCS_IT);
 80009da:	2100      	movs	r1, #0
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <main+0xa4>)
 80009de:	f7ff fe85 	bl	80006ec <ADC_IType_Enable>
	ADC_Channel_Init(ADC1,LL_ADC_REG_RANK_1,LL_ADC_CHANNEL_TEMPSENSOR);//ADC Channel Initializing
 80009e2:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <main+0xa8>)
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	480a      	ldr	r0, [pc, #40]	; (8000a14 <main+0xa4>)
 80009ea:	f7ff fe5b 	bl	80006a4 <ADC_Channel_Init>
	LL_ADC_Enable(ADC1); //ADC Enabling
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <main+0xa4>)
 80009f0:	f7ff ff05 	bl	80007fe <LL_ADC_Enable>

 	while(1)
	{
	if(LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_0))
 80009f4:	2101      	movs	r1, #1
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <main+0xa0>)
 80009f8:	f7ff fed3 	bl	80007a2 <LL_GPIO_IsInputPinSet>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f8      	beq.n	80009f4 <main+0x84>
	{
			LL_ADC_REG_StartConversionSWStart(ADC1);
 8000a02:	4804      	ldr	r0, [pc, #16]	; (8000a14 <main+0xa4>)
 8000a04:	f7ff ff0b 	bl	800081e <LL_ADC_REG_StartConversionSWStart>
	if(LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_0))
 8000a08:	e7f4      	b.n	80009f4 <main+0x84>
 8000a0a:	bf00      	nop
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40012000 	.word	0x40012000
 8000a18:	81200010 	.word	0x81200010

08000a1c <ADC_IRQHandler>:




void ADC_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	if(LL_ADC_IsEnabledIT_OVR(ADC1) && LL_ADC_IsActiveFlag_OVR(ADC1)!=0)
 8000a20:	4816      	ldr	r0, [pc, #88]	; (8000a7c <ADC_IRQHandler+0x60>)
 8000a22:	f7ff ff60 	bl	80008e6 <LL_ADC_IsEnabledIT_OVR>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d00a      	beq.n	8000a42 <ADC_IRQHandler+0x26>
 8000a2c:	4813      	ldr	r0, [pc, #76]	; (8000a7c <ADC_IRQHandler+0x60>)
 8000a2e:	f7ff ff26 	bl	800087e <LL_ADC_IsActiveFlag_OVR>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d004      	beq.n	8000a42 <ADC_IRQHandler+0x26>
	{

		LL_GPIO_TogglePin(GPIOD,LL_GPIO_PIN_12);
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	4810      	ldr	r0, [pc, #64]	; (8000a80 <ADC_IRQHandler+0x64>)
 8000a3e:	f7ff fec5 	bl	80007cc <LL_GPIO_TogglePin>

	}

	if(LL_ADC_IsEnabledIT_EOCS(ADC1) && LL_ADC_IsActiveFlag_EOCS(ADC1))
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <ADC_IRQHandler+0x60>)
 8000a44:	f7ff ff3c 	bl	80008c0 <LL_ADC_IsEnabledIT_EOCS>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d013      	beq.n	8000a76 <ADC_IRQHandler+0x5a>
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <ADC_IRQHandler+0x60>)
 8000a50:	f7ff ff02 	bl	8000858 <LL_ADC_IsActiveFlag_EOCS>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00d      	beq.n	8000a76 <ADC_IRQHandler+0x5a>
		{

		LL_ADC_ClearFlag_EOCS(ADC1);
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <ADC_IRQHandler+0x60>)
 8000a5c:	f7ff ff22 	bl	80008a4 <LL_ADC_ClearFlag_EOCS>

		temp= LL_ADC_REG_ReadConversionData32(ADC1);
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <ADC_IRQHandler+0x60>)
 8000a62:	f7ff feec 	bl	800083e <LL_ADC_REG_ReadConversionData32>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <ADC_IRQHandler+0x68>)
 8000a6a:	6013      	str	r3, [r2, #0]

		LL_GPIO_TogglePin(GPIOD,LL_GPIO_PIN_14);
 8000a6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <ADC_IRQHandler+0x64>)
 8000a72:	f7ff feab 	bl	80007cc <LL_GPIO_TogglePin>


	}

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40012000 	.word	0x40012000
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	2000001c 	.word	0x2000001c

08000a88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a8a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a92:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <LoopForever+0xe>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa8:	4c0a      	ldr	r4, [pc, #40]	; (8000ad4 <LoopForever+0x16>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ab6:	f000 f811 	bl	8000adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aba:	f7ff ff59 	bl	8000970 <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   r0, =_estack
 8000ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000acc:	08000b44 	.word	0x08000b44
  ldr r2, =_sbss
 8000ad0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ad4:	20000024 	.word	0x20000024

08000ad8 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <BusFault_Handler>
	...

08000adc <__libc_init_array>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	4d0d      	ldr	r5, [pc, #52]	; (8000b14 <__libc_init_array+0x38>)
 8000ae0:	4c0d      	ldr	r4, [pc, #52]	; (8000b18 <__libc_init_array+0x3c>)
 8000ae2:	1b64      	subs	r4, r4, r5
 8000ae4:	10a4      	asrs	r4, r4, #2
 8000ae6:	2600      	movs	r6, #0
 8000ae8:	42a6      	cmp	r6, r4
 8000aea:	d109      	bne.n	8000b00 <__libc_init_array+0x24>
 8000aec:	4d0b      	ldr	r5, [pc, #44]	; (8000b1c <__libc_init_array+0x40>)
 8000aee:	4c0c      	ldr	r4, [pc, #48]	; (8000b20 <__libc_init_array+0x44>)
 8000af0:	f000 f818 	bl	8000b24 <_init>
 8000af4:	1b64      	subs	r4, r4, r5
 8000af6:	10a4      	asrs	r4, r4, #2
 8000af8:	2600      	movs	r6, #0
 8000afa:	42a6      	cmp	r6, r4
 8000afc:	d105      	bne.n	8000b0a <__libc_init_array+0x2e>
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
 8000b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b04:	4798      	blx	r3
 8000b06:	3601      	adds	r6, #1
 8000b08:	e7ee      	b.n	8000ae8 <__libc_init_array+0xc>
 8000b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b0e:	4798      	blx	r3
 8000b10:	3601      	adds	r6, #1
 8000b12:	e7f2      	b.n	8000afa <__libc_init_array+0x1e>
 8000b14:	08000b3c 	.word	0x08000b3c
 8000b18:	08000b3c 	.word	0x08000b3c
 8000b1c:	08000b3c 	.word	0x08000b3c
 8000b20:	08000b40 	.word	0x08000b40

08000b24 <_init>:
 8000b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b26:	bf00      	nop
 8000b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b2a:	bc08      	pop	{r3}
 8000b2c:	469e      	mov	lr, r3
 8000b2e:	4770      	bx	lr

08000b30 <_fini>:
 8000b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b32:	bf00      	nop
 8000b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b36:	bc08      	pop	{r3}
 8000b38:	469e      	mov	lr, r3
 8000b3a:	4770      	bx	lr
