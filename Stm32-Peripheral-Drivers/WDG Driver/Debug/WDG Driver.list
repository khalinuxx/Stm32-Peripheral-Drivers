
WDG Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000718  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080008c0  080008c0  000108c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008d8  080008d8  000108e0  2**0
                  CONTENTS
  4 .ARM          00000000  080008d8  080008d8  000108e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008d8  080008e0  000108e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008d8  080008d8  000108d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008dc  080008dc  000108dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000108e0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000108e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002329  00000000  00000000  00010910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008fd  00000000  00000000  00012c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000348  00000000  00000000  00013538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002f0  00000000  00000000  00013880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c36  00000000  00000000  00013b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002677  00000000  00000000  0002d7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000909a7  00000000  00000000  0002fe1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c07c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c50  00000000  00000000  000c0818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080008a8 	.word	0x080008a8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080008a8 	.word	0x080008a8

080001e8 <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80001f6:	601a      	str	r2, [r3, #0]
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000212:	601a      	str	r2, [r3, #0]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f245 5255 	movw	r2, #21845	; 0x5555
 800022e:	601a      	str	r2, [r3, #0]
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	f003 0207 	and.w	r2, r3, #7
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	605a      	str	r2, [r3, #4]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr

0800025c <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	609a      	str	r2, [r3, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_IWDG_IsReady>:
  *         SR           RVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU) == 0U) ? 1UL : 0UL);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	f003 0303 	and.w	r3, r3, #3
 800028c:	2b00      	cmp	r3, #0
 800028e:	d101      	bne.n	8000294 <LL_IWDG_IsReady+0x18>
 8000290:	2301      	movs	r3, #1
 8000292:	e000      	b.n	8000296 <LL_IWDG_IsReady+0x1a>
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <IWDG_Init>:
  * @retval None
  */


void IWDG_Init(IWDG_TypeDef * IWDGx, uint32_t Prescaler , uint32_t Counter)
{
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b084      	sub	sp, #16
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	60f8      	str	r0, [r7, #12]
 80002aa:	60b9      	str	r1, [r7, #8]
 80002ac:	607a      	str	r2, [r7, #4]
  LL_IWDG_Enable(IWDGx);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f7ff ff9a 	bl	80001e8 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDGx);
 80002b4:	68f8      	ldr	r0, [r7, #12]
 80002b6:	f7ff ffb3 	bl	8000220 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDGx,Prescaler);
 80002ba:	68b9      	ldr	r1, [r7, #8]
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ffbd 	bl	800023c <LL_IWDG_SetPrescaler>
	LL_IWDG_SetReloadCounter(IWDGx,Counter);
 80002c2:	6879      	ldr	r1, [r7, #4]
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f7ff ffc9 	bl	800025c <LL_IWDG_SetReloadCounter>

	while (LL_IWDG_IsReady(IWDGx) != 1)
 80002ca:	bf00      	nop
 80002cc:	68f8      	ldr	r0, [r7, #12]
 80002ce:	f7ff ffd5 	bl	800027c <LL_IWDG_IsReady>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d1f9      	bne.n	80002cc <IWDG_Init+0x2a>
	  {
	  }

	  LL_IWDG_ReloadCounter(IWDGx);
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff93 	bl	8000204 <LL_IWDG_ReloadCounter>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <IWDG_Refresh>:
  * @brief  Refresh Independent watchdog.
  * @param  None.
  * @retval None
  */
void IWDG_Refresh(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	  LL_IWDG_ReloadCounter(IWDG);
 80002ec:	4802      	ldr	r0, [pc, #8]	; (80002f8 <IWDG_Refresh+0x10>)
 80002ee:	f7ff ff89 	bl	8000204 <LL_IWDG_ReloadCounter>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40003000 	.word	0x40003000

080002fc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000308:	4907      	ldr	r1, [pc, #28]	; (8000328 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4313      	orrs	r3, r2
 800030e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4013      	ands	r3, r2
 8000318:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800031a:	68fb      	ldr	r3, [r7, #12]
}
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40023800 	.word	0x40023800

0800032c <LL_RCC_IsActiveFlag_IWDGRST>:
  * @brief  Check if RCC flag Independent Watchdog reset is set or not.
  * @rmtoll CSR          IWDGRSTF      LL_RCC_IsActiveFlag_IWDGRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_IWDGRST(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_IWDGRSTF) == (RCC_CSR_IWDGRSTF));
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <LL_RCC_IsActiveFlag_IWDGRST+0x24>)
 8000332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800033c:	bf0c      	ite	eq
 800033e:	2301      	moveq	r3, #1
 8000340:	2300      	movne	r3, #0
 8000342:	b2db      	uxtb	r3, r3
}
 8000344:	4618      	mov	r0, r3
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800

08000354 <LL_RCC_IsActiveFlag_WWDGRST>:
  * @brief  Check if RCC flag Window Watchdog reset is set or not.
  * @rmtoll CSR          WWDGRSTF      LL_RCC_IsActiveFlag_WWDGRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_WWDGRST(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_WWDGRSTF) == (RCC_CSR_WWDGRSTF));
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <LL_RCC_IsActiveFlag_WWDGRST+0x24>)
 800035a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800035c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000364:	bf0c      	ite	eq
 8000366:	2301      	moveq	r3, #1
 8000368:	2300      	movne	r3, #0
 800036a:	b2db      	uxtb	r3, r3
}
 800036c:	4618      	mov	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40023800 	.word	0x40023800

0800037c <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <LL_RCC_ClearResetFlags+0x1c>)
 8000382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <LL_RCC_ClearResetFlags+0x1c>)
 8000386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038a:	6753      	str	r3, [r2, #116]	; 0x74
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800

0800039c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800039c:	b480      	push	{r7}
 800039e:	b089      	sub	sp, #36	; 0x24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	fa93 f3a3 	rbit	r3, r3
 80003b6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	fab3 f383 	clz	r3, r3
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	2103      	movs	r1, #3
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	43db      	mvns	r3, r3
 80003ca:	401a      	ands	r2, r3
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d0:	69fb      	ldr	r3, [r7, #28]
 80003d2:	fa93 f3a3 	rbit	r3, r3
 80003d6:	61bb      	str	r3, [r7, #24]
  return result;
 80003d8:	69bb      	ldr	r3, [r7, #24]
 80003da:	fab3 f383 	clz	r3, r3
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	fa01 f303 	lsl.w	r3, r1, r3
 80003e8:	431a      	orrs	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	601a      	str	r2, [r3, #0]
}
 80003ee:	bf00      	nop
 80003f0:	3724      	adds	r7, #36	; 0x24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003fa:	b480      	push	{r7}
 80003fc:	b083      	sub	sp, #12
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
 8000402:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	683a      	ldr	r2, [r7, #0]
 8000408:	619a      	str	r2, [r3, #24]
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <main>:
#include"stm32f4xx_ll_rcc.h"
#include"stm32f4xx_ll_gpio.h"
void Check_restart_source(void);

int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
	LL_RCC_ClocksTypeDef RCC_Clock={0};
 800041e:	463b      	mov	r3, r7
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
	LL_RCC_GetSystemClocksFreq(&RCC_Clock);
 800042a:	463b      	mov	r3, r7
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f8ff 	bl	8000630 <LL_RCC_GetSystemClocksFreq>



	LL_Init1msTick(RCC_Clock.SYSCLK_Frequency);
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f9df 	bl	80007f8 <LL_Init1msTick>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800043a:	2008      	movs	r0, #8
 800043c:	f7ff ff5e 	bl	80002fc <LL_AHB1_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_15,LL_GPIO_MODE_OUTPUT);
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000446:	4811      	ldr	r0, [pc, #68]	; (800048c <main+0x74>)
 8000448:	f7ff ffa8 	bl	800039c <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_13,LL_GPIO_MODE_OUTPUT);
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000452:	480e      	ldr	r0, [pc, #56]	; (800048c <main+0x74>)
 8000454:	f7ff ffa2 	bl	800039c <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOD,LL_GPIO_PIN_14,LL_GPIO_MODE_OUTPUT);
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800045e:	480b      	ldr	r0, [pc, #44]	; (800048c <main+0x74>)
 8000460:	f7ff ff9c 	bl	800039c <LL_GPIO_SetPinMode>

	IWDG_Init(IWDG,LL_IWDG_PRESCALER_64,499);//---[0     1000]-------
 8000464:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000468:	2104      	movs	r1, #4
 800046a:	4809      	ldr	r0, [pc, #36]	; (8000490 <main+0x78>)
 800046c:	f7ff ff19 	bl	80002a2 <IWDG_Init>
	Check_restart_source();
 8000470:	f000 f810 	bl	8000494 <Check_restart_source>
	//WWDG_Init(LL_WWDG_PRESCALER_4,83, 70);//---[13    20]---------

   LL_GPIO_SetOutputPin (GPIOD, LL_GPIO_PIN_15);
 8000474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <main+0x74>)
 800047a:	f7ff ffbe 	bl	80003fa <LL_GPIO_SetOutputPin>

	while(1)
	{

		LL_mDelay(1100);
 800047e:	f240 404c 	movw	r0, #1100	; 0x44c
 8000482:	f000 f9c7 	bl	8000814 <LL_mDelay>
		IWDG_Refresh();
 8000486:	f7ff ff2f 	bl	80002e8 <IWDG_Refresh>
		LL_mDelay(1100);
 800048a:	e7f8      	b.n	800047e <main+0x66>
 800048c:	40020c00 	.word	0x40020c00
 8000490:	40003000 	.word	0x40003000

08000494 <Check_restart_source>:

}


void Check_restart_source(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	if(LL_RCC_IsActiveFlag_IWDGRST())
 8000498:	f7ff ff48 	bl	800032c <LL_RCC_IsActiveFlag_IWDGRST>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d006      	beq.n	80004b0 <Check_restart_source+0x1c>
	{
		LL_RCC_ClearResetFlags();
 80004a2:	f7ff ff6b 	bl	800037c <LL_RCC_ClearResetFlags>

		LL_GPIO_SetOutputPin (GPIOD, LL_GPIO_PIN_13);
 80004a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004aa:	4808      	ldr	r0, [pc, #32]	; (80004cc <Check_restart_source+0x38>)
 80004ac:	f7ff ffa5 	bl	80003fa <LL_GPIO_SetOutputPin>
		//if the restart was from IWDG the orange led PD13 will Set

	}
	if(LL_RCC_IsActiveFlag_WWDGRST())
 80004b0:	f7ff ff50 	bl	8000354 <LL_RCC_IsActiveFlag_WWDGRST>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d006      	beq.n	80004c8 <Check_restart_source+0x34>
	{
		LL_RCC_ClearResetFlags();
 80004ba:	f7ff ff5f 	bl	800037c <LL_RCC_ClearResetFlags>

		LL_GPIO_SetOutputPin (GPIOD, LL_GPIO_PIN_14);
 80004be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004c2:	4802      	ldr	r0, [pc, #8]	; (80004cc <Check_restart_source+0x38>)
 80004c4:	f7ff ff99 	bl	80003fa <LL_GPIO_SetOutputPin>
		//if the restart was from WWDG the Red led PD14 will Set
	}

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40020c00 	.word	0x40020c00

080004d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <SystemInit+0x28>)
 80004d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <SystemInit+0x28>)
 80004dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <SystemInit+0x28>)
 80004e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004ea:	609a      	str	r2, [r3, #8]
#endif
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000500:	f7ff ffe6 	bl	80004d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 f999 	bl	8000860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff ff73 	bl	8000418 <main>

08000532 <LoopForever>:

LoopForever:
    b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000540:	080008e0 	.word	0x080008e0
  ldr r2, =_sbss
 8000544:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000548:	2000001c 	.word	0x2000001c

0800054c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC_IRQHandler>
	...

08000550 <LL_RCC_GetSysClkSource>:
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <LL_RCC_GetSysClkSource+0x18>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	f003 030c 	and.w	r3, r3, #12
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800

0800056c <LL_RCC_GetAHBPrescaler>:
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <LL_RCC_GetAHBPrescaler+0x18>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800

08000588 <LL_RCC_GetAPB1Prescaler>:
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800

080005a4 <LL_RCC_GetAPB2Prescaler>:
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <LL_RCC_GetAPB2Prescaler+0x18>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800

080005c0 <LL_RCC_PLL_GetMainSource>:
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <LL_RCC_PLL_GetMainSource+0x18>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800

080005dc <LL_RCC_PLL_GetN>:
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <LL_RCC_PLL_GetN+0x18>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	099b      	lsrs	r3, r3, #6
 80005e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	40023800 	.word	0x40023800

080005f8 <LL_RCC_PLL_GetP>:
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <LL_RCC_PLL_GetP+0x18>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800

08000614 <LL_RCC_PLL_GetDivider>:
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <LL_RCC_PLL_GetDivider+0x18>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800

08000630 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000638:	f000 f820 	bl	800067c <RCC_GetSystemClockFreq>
 800063c:	4602      	mov	r2, r0
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f840 	bl	80006cc <RCC_GetHCLKClockFreq>
 800064c:	4602      	mov	r2, r0
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f84e 	bl	80006f8 <RCC_GetPCLK1ClockFreq>
 800065c:	4602      	mov	r2, r0
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f85a 	bl	8000720 <RCC_GetPCLK2ClockFreq>
 800066c:	4602      	mov	r2, r0
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60da      	str	r2, [r3, #12]
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000686:	f7ff ff63 	bl	8000550 <LL_RCC_GetSysClkSource>
 800068a:	4603      	mov	r3, r0
 800068c:	2b08      	cmp	r3, #8
 800068e:	d00c      	beq.n	80006aa <RCC_GetSystemClockFreq+0x2e>
 8000690:	2b08      	cmp	r3, #8
 8000692:	d80f      	bhi.n	80006b4 <RCC_GetSystemClockFreq+0x38>
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <RCC_GetSystemClockFreq+0x22>
 8000698:	2b04      	cmp	r3, #4
 800069a:	d003      	beq.n	80006a4 <RCC_GetSystemClockFreq+0x28>
 800069c:	e00a      	b.n	80006b4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <RCC_GetSystemClockFreq+0x48>)
 80006a0:	607b      	str	r3, [r7, #4]
      break;
 80006a2:	e00a      	b.n	80006ba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <RCC_GetSystemClockFreq+0x4c>)
 80006a6:	607b      	str	r3, [r7, #4]
      break;
 80006a8:	e007      	b.n	80006ba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80006aa:	2008      	movs	r0, #8
 80006ac:	f000 f84c 	bl	8000748 <RCC_PLL_GetFreqDomain_SYS>
 80006b0:	6078      	str	r0, [r7, #4]
      break;
 80006b2:	e002      	b.n	80006ba <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <RCC_GetSystemClockFreq+0x48>)
 80006b6:	607b      	str	r3, [r7, #4]
      break;
 80006b8:	bf00      	nop
  }

  return frequency;
 80006ba:	687b      	ldr	r3, [r7, #4]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	00f42400 	.word	0x00f42400
 80006c8:	017d7840 	.word	0x017d7840

080006cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80006d4:	f7ff ff4a 	bl	800056c <LL_RCC_GetAHBPrescaler>
 80006d8:	4603      	mov	r3, r0
 80006da:	091b      	lsrs	r3, r3, #4
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <RCC_GetHCLKClockFreq+0x28>)
 80006e2:	5cd3      	ldrb	r3, [r2, r3]
 80006e4:	461a      	mov	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	40d3      	lsrs	r3, r2
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	080008c0 	.word	0x080008c0

080006f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000700:	f7ff ff42 	bl	8000588 <LL_RCC_GetAPB1Prescaler>
 8000704:	4603      	mov	r3, r0
 8000706:	0a9b      	lsrs	r3, r3, #10
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <RCC_GetPCLK1ClockFreq+0x24>)
 800070a:	5cd3      	ldrb	r3, [r2, r3]
 800070c:	461a      	mov	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	40d3      	lsrs	r3, r2
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	080008d0 	.word	0x080008d0

08000720 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000728:	f7ff ff3c 	bl	80005a4 <LL_RCC_GetAPB2Prescaler>
 800072c:	4603      	mov	r3, r0
 800072e:	0b5b      	lsrs	r3, r3, #13
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <RCC_GetPCLK2ClockFreq+0x24>)
 8000732:	5cd3      	ldrb	r3, [r2, r3]
 8000734:	461a      	mov	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	40d3      	lsrs	r3, r2
}
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	080008d0 	.word	0x080008d0

08000748 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800075c:	f7ff ff30 	bl	80005c0 <LL_RCC_PLL_GetMainSource>
 8000760:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d004      	beq.n	8000772 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800076e:	d003      	beq.n	8000778 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8000770:	e005      	b.n	800077e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8000774:	617b      	str	r3, [r7, #20]
      break;
 8000776:	e005      	b.n	8000784 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800077a:	617b      	str	r3, [r7, #20]
      break;
 800077c:	e002      	b.n	8000784 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8000780:	617b      	str	r3, [r7, #20]
      break;
 8000782:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b08      	cmp	r3, #8
 8000788:	d113      	bne.n	80007b2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800078a:	f7ff ff43 	bl	8000614 <LL_RCC_PLL_GetDivider>
 800078e:	4602      	mov	r2, r0
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	fbb3 f4f2 	udiv	r4, r3, r2
 8000796:	f7ff ff21 	bl	80005dc <LL_RCC_PLL_GetN>
 800079a:	4603      	mov	r3, r0
 800079c:	fb03 f404 	mul.w	r4, r3, r4
 80007a0:	f7ff ff2a 	bl	80005f8 <LL_RCC_PLL_GetP>
 80007a4:	4603      	mov	r3, r0
 80007a6:	0c1b      	lsrs	r3, r3, #16
 80007a8:	3301      	adds	r3, #1
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	fbb4 f3f3 	udiv	r3, r4, r3
 80007b0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80007b2:	693b      	ldr	r3, [r7, #16]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	371c      	adds	r7, #28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd90      	pop	{r4, r7, pc}
 80007bc:	00f42400 	.word	0x00f42400
 80007c0:	017d7840 	.word	0x017d7840

080007c4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <LL_InitTick+0x30>)
 80007d8:	3b01      	subs	r3, #1
 80007da:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <LL_InitTick+0x30>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <LL_InitTick+0x30>)
 80007e4:	2205      	movs	r2, #5
 80007e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000e010 	.word	0xe000e010

080007f8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ffdd 	bl	80007c4 <LL_InitTick>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <LL_mDelay+0x48>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000822:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082a:	d00c      	beq.n	8000846 <LL_mDelay+0x32>
  {
    Delay++;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000832:	e008      	b.n	8000846 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <LL_mDelay+0x48>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <LL_mDelay+0x32>
    {
      Delay--;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f3      	bne.n	8000834 <LL_mDelay+0x20>
    }
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e010 	.word	0xe000e010

08000860 <__libc_init_array>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	4d0d      	ldr	r5, [pc, #52]	; (8000898 <__libc_init_array+0x38>)
 8000864:	4c0d      	ldr	r4, [pc, #52]	; (800089c <__libc_init_array+0x3c>)
 8000866:	1b64      	subs	r4, r4, r5
 8000868:	10a4      	asrs	r4, r4, #2
 800086a:	2600      	movs	r6, #0
 800086c:	42a6      	cmp	r6, r4
 800086e:	d109      	bne.n	8000884 <__libc_init_array+0x24>
 8000870:	4d0b      	ldr	r5, [pc, #44]	; (80008a0 <__libc_init_array+0x40>)
 8000872:	4c0c      	ldr	r4, [pc, #48]	; (80008a4 <__libc_init_array+0x44>)
 8000874:	f000 f818 	bl	80008a8 <_init>
 8000878:	1b64      	subs	r4, r4, r5
 800087a:	10a4      	asrs	r4, r4, #2
 800087c:	2600      	movs	r6, #0
 800087e:	42a6      	cmp	r6, r4
 8000880:	d105      	bne.n	800088e <__libc_init_array+0x2e>
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f855 3b04 	ldr.w	r3, [r5], #4
 8000888:	4798      	blx	r3
 800088a:	3601      	adds	r6, #1
 800088c:	e7ee      	b.n	800086c <__libc_init_array+0xc>
 800088e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000892:	4798      	blx	r3
 8000894:	3601      	adds	r6, #1
 8000896:	e7f2      	b.n	800087e <__libc_init_array+0x1e>
 8000898:	080008d8 	.word	0x080008d8
 800089c:	080008d8 	.word	0x080008d8
 80008a0:	080008d8 	.word	0x080008d8
 80008a4:	080008dc 	.word	0x080008dc

080008a8 <_init>:
 80008a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008aa:	bf00      	nop
 80008ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ae:	bc08      	pop	{r3}
 80008b0:	469e      	mov	lr, r3
 80008b2:	4770      	bx	lr

080008b4 <_fini>:
 80008b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b6:	bf00      	nop
 80008b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ba:	bc08      	pop	{r3}
 80008bc:	469e      	mov	lr, r3
 80008be:	4770      	bx	lr
