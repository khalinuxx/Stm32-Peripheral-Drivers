
/**
  ******************************************************************************
  * @file    Uart.c
  * @author  Khalil Mansouri & Mouadh Dahech
  * @brief   Source file of Uart LL Driver.
  *  Created on: 20 juil. 2022
  ******************************************************************************
  * @attention
  *
  * Copyright NOTICE: (c) 2022 ACTIA Engineering Services.
  * All rights reserved.
  *
  * This software is placed in the public domain and may be used for any purpose
  * You can find this code on https://github.com/mouadhgit/Stm32-Peripheral-Drivers
  ******************************************************************************
  */
/* Define to prevent recursive inclusion -------------------------------------*/
#include "../Inc/Uart.h"

/*---------------------------------------------USARTx Initialization Function---------------------------------------------------------*/





void USART_GPIO_Init(GPIO_TypeDef * GPIOx, uint32_t PIN ,uint32_t Alternate )
{

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

	  GPIO_InitStruct.Pin = PIN;
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  GPIO_InitStruct.Alternate = Alternate;
	  LL_GPIO_Init(GPIOx, &GPIO_InitStruct);

}



void UART_Init(USART_TypeDef *USARTx)
	{



	  LL_USART_InitTypeDef USART_InitStruct = {0};


/*------------------------------- UART Configuration ---------------------------- */
	  USART_InitStruct.BaudRate = 115200;
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
	  LL_USART_Init(USARTx, &USART_InitStruct);
	  LL_USART_ConfigAsyncMode(USARTx);    /* Perform basic configuration of USART for enabling use in Asynchronous Mode (UART) */
	//LL_USART_ConfigSyncMode (USARTx);    /* if u want to use USARTx in Synchronous Mode Uncomment this line and delete the LL_USART_ConfigAsyncMode function */
	  LL_USART_Enable(USARTx);             /* USARTx Must be enabled before using the LL_USART_Init function */


	}

/*---------------------------------------- Function to Transmit one character -----------------------------------------------------*/
void USART_Write(int ch,USART_TypeDef *USARTx)
{
	LL_USART_EnableDirectionTx (USARTx);
	while (!LL_USART_IsActiveFlag_TXE (USARTx)){}  /* Check if the USART Transmit Data Register Empty Flag is set or not */
	LL_USART_TransmitData8(USARTx,ch);             /* Write in Transmitter Data Register (Transmit Data value, 8 bits) */
}


/*---------------------------------------- Function to receiver one character -----------------------------------------------------*/
char USART_Read(USART_TypeDef *USARTx)
{

	while (!LL_USART_IsActiveFlag_RXNE(USARTx)){}  /* Check if the USART Transmit Data Register Empty Flag is set or not */
	 return LL_USART_ReceiveData8(USARTx);         /* Write in Receiver Data Register (Transmit Data value, 8 bits) */
}

int __io_putchar(int ch)
{
	uart_write(ch);
	return ch;
}
