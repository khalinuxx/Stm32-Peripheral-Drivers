/**
  ******************************************************************************
  * @file    ADC.c
  * @author  Khalil Mansouri & Mouadh Dahech
  * @brief   Source file of ADC LL Driver.
  * Created on: 1 Aug. 2022
  ******************************************************************************
  * @attention
  *
  * Copyright NOTICE: (c) 2022 ACTIA Engineering Services, R&D Team.
  * All rights reserved.
  ******************************************************************************
  */
/* Define to prevent recursive inclusion -------------------------------------*/
#include "../Inc/ADC.h"

void ADC_GPIO_Init(GPIO_TypeDef *GPIOx,uint32_t Pin)
{

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
	  /* ADCx GPIO Configuration */
	  GPIO_InitStruct.Pin = Pin;
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  LL_GPIO_Init(GPIOx, &GPIO_InitStruct);

}
void ADC_Init(ADC_TypeDef *ADCx)
{

	  LL_ADC_InitTypeDef ADC_InitStruct = {0};



	  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
	  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
	  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
	  LL_ADC_Init(ADCx, &ADC_InitStruct);


}

void ADC_REG_Init(ADC_TypeDef *ADCx)
{
	 LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};

	  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
	  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
	  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
	  ADC_REG_InitStruct.ContinuousMode =  LL_ADC_REG_CONV_CONTINUOUS;
	  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
	  LL_ADC_REG_Init(ADCx, &ADC_REG_InitStruct);
	  LL_ADC_REG_SetFlagEndOfConversion(ADCx, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);


}


void ADC_Com_Init(ADC_TypeDef *ADCx)
{
	 LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};

	  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
	  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
	  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADCx), &ADC_CommonInitStruct);

}

void ADC_Channel_Init(ADC_TypeDef *ADCx,uint32_t Rank , uint32_t Channel)
{
	  /** Configure Regular Channel*/
	  LL_ADC_REG_SetSequencerRanks(ADCx,Rank,Channel);
	  LL_ADC_SetChannelSamplingTime(ADCx, Channel,LL_ADC_SAMPLINGTIME_112CYCLES);
}



uint32_t ADC_Read(ADC_TypeDef *ADCx)
{
	 LL_ADC_REG_StartConversionSWStart(ADCx);

	while(!LL_ADC_IsActiveFlag_EOCS(ADCx)){}

	return LL_ADC_REG_ReadConversionData32(ADCx);

}
